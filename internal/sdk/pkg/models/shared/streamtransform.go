// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TransformType string

const (
	TransformTypeAddStream    TransformType = "add_stream"
	TransformTypeRemoveStream TransformType = "remove_stream"
	TransformTypeUpdateStream TransformType = "update_stream"
)

func (e TransformType) ToPointer() *TransformType {
	return &e
}

func (e *TransformType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "add_stream":
		fallthrough
	case "remove_stream":
		fallthrough
	case "update_stream":
		*e = TransformType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransformType: %v", v)
	}
}

type StreamTransform struct {
	TransformType    TransformType    `json:"transformType"`
	StreamDescriptor StreamDescriptor `json:"streamDescriptor"`
	// list of field transformations. order does not matter.
	UpdateStream []FieldTransform `json:"updateStream,omitempty"`
}

func (o *StreamTransform) GetTransformType() TransformType {
	if o == nil {
		return TransformType("")
	}
	return o.TransformType
}

func (o *StreamTransform) GetStreamDescriptor() StreamDescriptor {
	if o == nil {
		return StreamDescriptor{}
	}
	return o.StreamDescriptor
}

func (o *StreamTransform) GetUpdateStream() []FieldTransform {
	if o == nil {
		return nil
	}
	return o.UpdateStream
}
