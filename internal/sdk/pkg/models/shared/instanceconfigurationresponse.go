// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Edition string

const (
	EditionCommunity Edition = "community"
	EditionPro       Edition = "pro"
)

func (e Edition) ToPointer() *Edition {
	return &e
}

func (e *Edition) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "community":
		fallthrough
	case "pro":
		*e = Edition(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Edition: %v", v)
	}
}

type LicenseType string

const (
	LicenseTypePro     LicenseType = "pro"
	LicenseTypeInvalid LicenseType = "invalid"
)

func (e LicenseType) ToPointer() *LicenseType {
	return &e
}

func (e *LicenseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "invalid":
		*e = LicenseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LicenseType: %v", v)
	}
}

type InstanceConfigurationResponse struct {
	Edition               Edition            `json:"edition"`
	LicenseType           *LicenseType       `json:"licenseType,omitempty"`
	Auth                  *AuthConfiguration `json:"auth,omitempty"`
	WebappURL             string             `json:"webappUrl"`
	InitialSetupComplete  bool               `json:"initialSetupComplete"`
	DefaultUserID         string             `json:"defaultUserId"`
	DefaultOrganizationID string             `json:"defaultOrganizationId"`
	DefaultWorkspaceID    string             `json:"defaultWorkspaceId"`
}

func (o *InstanceConfigurationResponse) GetEdition() Edition {
	if o == nil {
		return Edition("")
	}
	return o.Edition
}

func (o *InstanceConfigurationResponse) GetLicenseType() *LicenseType {
	if o == nil {
		return nil
	}
	return o.LicenseType
}

func (o *InstanceConfigurationResponse) GetAuth() *AuthConfiguration {
	if o == nil {
		return nil
	}
	return o.Auth
}

func (o *InstanceConfigurationResponse) GetWebappURL() string {
	if o == nil {
		return ""
	}
	return o.WebappURL
}

func (o *InstanceConfigurationResponse) GetInitialSetupComplete() bool {
	if o == nil {
		return false
	}
	return o.InitialSetupComplete
}

func (o *InstanceConfigurationResponse) GetDefaultUserID() string {
	if o == nil {
		return ""
	}
	return o.DefaultUserID
}

func (o *InstanceConfigurationResponse) GetDefaultOrganizationID() string {
	if o == nil {
		return ""
	}
	return o.DefaultOrganizationID
}

func (o *InstanceConfigurationResponse) GetDefaultWorkspaceID() string {
	if o == nil {
		return ""
	}
	return o.DefaultWorkspaceID
}
