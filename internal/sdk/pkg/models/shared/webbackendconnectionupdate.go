// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk/pkg/utils"
)

// WebBackendConnectionUpdate - Used to apply a patch-style update to a connection, which means that null properties remain unchanged
type WebBackendConnectionUpdate struct {
	// Name that will be set to the connection
	Name         *string `json:"name,omitempty"`
	ConnectionID string  `json:"connectionId"`
	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`
	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string `default:"null" json:"namespaceFormat"`
	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`
	// describes the available schema (catalog).
	SyncCatalog *AirbyteCatalog `json:"syncCatalog,omitempty"`
	// if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`
	// determine how the schedule data should be interpreted
	ScheduleType *ConnectionScheduleType `json:"scheduleType,omitempty"`
	// schedule for when the the connection should run, per the schedule type
	ScheduleData *ConnectionScheduleData `json:"scheduleData,omitempty"`
	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status *ConnectionStatus `json:"status,omitempty"`
	// optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements         *ResourceRequirements               `json:"resourceRequirements,omitempty"`
	SkipReset                    *bool                               `json:"skipReset,omitempty"`
	Operations                   []WebBackendOperationCreateOrUpdate `json:"operations,omitempty"`
	SourceCatalogID              *string                             `json:"sourceCatalogId,omitempty"`
	Geography                    *Geography                          `json:"geography,omitempty"`
	NotifySchemaChanges          *bool                               `json:"notifySchemaChanges,omitempty"`
	NotifySchemaChangesByEmail   *bool                               `json:"notifySchemaChangesByEmail,omitempty"`
	NonBreakingChangesPreference *NonBreakingChangesPreference       `json:"nonBreakingChangesPreference,omitempty"`
}

func (w WebBackendConnectionUpdate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WebBackendConnectionUpdate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *WebBackendConnectionUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *WebBackendConnectionUpdate) GetConnectionID() string {
	if o == nil {
		return ""
	}
	return o.ConnectionID
}

func (o *WebBackendConnectionUpdate) GetNamespaceDefinition() *NamespaceDefinitionType {
	if o == nil {
		return nil
	}
	return o.NamespaceDefinition
}

func (o *WebBackendConnectionUpdate) GetNamespaceFormat() *string {
	if o == nil {
		return nil
	}
	return o.NamespaceFormat
}

func (o *WebBackendConnectionUpdate) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *WebBackendConnectionUpdate) GetSyncCatalog() *AirbyteCatalog {
	if o == nil {
		return nil
	}
	return o.SyncCatalog
}

func (o *WebBackendConnectionUpdate) GetSchedule() *ConnectionSchedule {
	if o == nil {
		return nil
	}
	return o.Schedule
}

func (o *WebBackendConnectionUpdate) GetScheduleType() *ConnectionScheduleType {
	if o == nil {
		return nil
	}
	return o.ScheduleType
}

func (o *WebBackendConnectionUpdate) GetScheduleData() *ConnectionScheduleData {
	if o == nil {
		return nil
	}
	return o.ScheduleData
}

func (o *WebBackendConnectionUpdate) GetStatus() *ConnectionStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *WebBackendConnectionUpdate) GetResourceRequirements() *ResourceRequirements {
	if o == nil {
		return nil
	}
	return o.ResourceRequirements
}

func (o *WebBackendConnectionUpdate) GetSkipReset() *bool {
	if o == nil {
		return nil
	}
	return o.SkipReset
}

func (o *WebBackendConnectionUpdate) GetOperations() []WebBackendOperationCreateOrUpdate {
	if o == nil {
		return nil
	}
	return o.Operations
}

func (o *WebBackendConnectionUpdate) GetSourceCatalogID() *string {
	if o == nil {
		return nil
	}
	return o.SourceCatalogID
}

func (o *WebBackendConnectionUpdate) GetGeography() *Geography {
	if o == nil {
		return nil
	}
	return o.Geography
}

func (o *WebBackendConnectionUpdate) GetNotifySchemaChanges() *bool {
	if o == nil {
		return nil
	}
	return o.NotifySchemaChanges
}

func (o *WebBackendConnectionUpdate) GetNotifySchemaChangesByEmail() *bool {
	if o == nil {
		return nil
	}
	return o.NotifySchemaChangesByEmail
}

func (o *WebBackendConnectionUpdate) GetNonBreakingChangesPreference() *NonBreakingChangesPreference {
	if o == nil {
		return nil
	}
	return o.NonBreakingChangesPreference
}
