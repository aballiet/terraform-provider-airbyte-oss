// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SourceDefinitionDataSource{}
var _ datasource.DataSourceWithConfigure = &SourceDefinitionDataSource{}

func NewSourceDefinitionDataSource() datasource.DataSource {
	return &SourceDefinitionDataSource{}
}

// SourceDefinitionDataSource is the data source implementation.
type SourceDefinitionDataSource struct {
	client *sdk.SDK
}

// SourceDefinitionDataSourceModel describes the data model.
type SourceDefinitionDataSourceModel struct {
	Custom                    types.Bool                           `tfsdk:"custom"`
	DockerImageTag            types.String                         `tfsdk:"docker_image_tag"`
	DockerRepository          types.String                         `tfsdk:"docker_repository"`
	DocumentationURL          types.String                         `tfsdk:"documentation_url"`
	Icon                      types.String                         `tfsdk:"icon"`
	MaxSecondsBetweenMessages types.Int64                          `tfsdk:"max_seconds_between_messages"`
	Name                      types.String                         `tfsdk:"name"`
	ProtocolVersion           types.String                         `tfsdk:"protocol_version"`
	ReleaseDate               types.String                         `tfsdk:"release_date"`
	ReleaseStage              types.String                         `tfsdk:"release_stage"`
	ResourceRequirements      *ActorDefinitionResourceRequirements `tfsdk:"resource_requirements"`
	SourceDefinitionID        types.String                         `tfsdk:"source_definition_id"`
	SourceType                types.String                         `tfsdk:"source_type"`
	SupportLevel              types.String                         `tfsdk:"support_level"`
}

// Metadata returns the data source type name.
func (r *SourceDefinitionDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_source_definition"
}

// Schema defines the schema for the data source.
func (r *SourceDefinitionDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SourceDefinition DataSource",

		Attributes: map[string]schema.Attribute{
			"custom": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the connector is custom or not`,
			},
			"docker_image_tag": schema.StringAttribute{
				Computed: true,
			},
			"docker_repository": schema.StringAttribute{
				Computed: true,
			},
			"documentation_url": schema.StringAttribute{
				Computed: true,
			},
			"icon": schema.StringAttribute{
				Computed: true,
			},
			"max_seconds_between_messages": schema.Int64Attribute{
				Computed:    true,
				Description: `Number of seconds allowed between 2 airbyte protocol messages. The source will timeout if this delay is reach`,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"protocol_version": schema.StringAttribute{
				Computed:    true,
				Description: `The Airbyte Protocol version supported by the connector`,
			},
			"release_date": schema.StringAttribute{
				Computed:    true,
				Description: `The date when this connector was first released, in yyyy-mm-dd format.`,
			},
			"release_stage": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["alpha", "beta", "generally_available", "custom"]`,
			},
			"resource_requirements": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"default": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"cpu_limit": schema.StringAttribute{
								Computed: true,
							},
							"cpu_request": schema.StringAttribute{
								Computed: true,
							},
							"memory_limit": schema.StringAttribute{
								Computed: true,
							},
							"memory_request": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `optional resource requirements to run workers (blank for unbounded allocations)`,
					},
					"job_specific": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"job_type": schema.StringAttribute{
									Computed:    true,
									Description: `enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]`,
								},
								"resource_requirements": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"cpu_limit": schema.StringAttribute{
											Computed: true,
										},
										"cpu_request": schema.StringAttribute{
											Computed: true,
										},
										"memory_limit": schema.StringAttribute{
											Computed: true,
										},
										"memory_request": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `optional resource requirements to run workers (blank for unbounded allocations)`,
								},
							},
						},
					},
				},
				Description: `actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.`,
			},
			"source_definition_id": schema.StringAttribute{
				Required: true,
			},
			"source_type": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["api", "file", "database", "custom"]`,
			},
			"support_level": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["community", "certified", "none"]`,
			},
		},
	}
}

func (r *SourceDefinitionDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SourceDefinitionDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SourceDefinitionDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedSourceDefinitionIDRequestBody()
	res, err := r.client.SourceDefinition.GetSourceDefinition(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceDefinitionRead == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedSourceDefinitionRead(res.SourceDefinitionRead)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
