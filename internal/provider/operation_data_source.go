// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk"
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk/pkg/models/shared"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &OperationDataSource{}
var _ datasource.DataSourceWithConfigure = &OperationDataSource{}

func NewOperationDataSource() datasource.DataSource {
	return &OperationDataSource{}
}

// OperationDataSource is the data source implementation.
type OperationDataSource struct {
	client *sdk.SDK
}

// OperationDataSourceModel describes the data model.
type OperationDataSourceModel struct {
	Name                  types.String          `tfsdk:"name"`
	OperationID           types.String          `tfsdk:"operation_id"`
	OperatorConfiguration OperatorConfiguration `tfsdk:"operator_configuration"`
	WorkspaceID           types.String          `tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *OperationDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_operation"
}

// Schema defines the schema for the data source.
func (r *OperationDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Operation DataSource",

		Attributes: map[string]schema.Attribute{
			"name": schema.StringAttribute{
				Computed: true,
			},
			"operation_id": schema.StringAttribute{
				Required: true,
			},
			"operator_configuration": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"operator_type": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["normalization", "dbt", "webhook"]`,
					},
					"normalization": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"option": schema.StringAttribute{
								Computed:    true,
								Description: `must be one of ["basic"]`,
							},
						},
					},
					"dbt": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"git_repo_url": schema.StringAttribute{
								Computed: true,
							},
							"git_repo_branch": schema.StringAttribute{
								Computed: true,
							},
							"docker_image": schema.StringAttribute{
								Computed: true,
							},
							"dbt_arguments": schema.StringAttribute{
								Computed: true,
							},
						},
					},
					"webhook": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"webhook_config_id": schema.StringAttribute{
								Computed:    true,
								Description: `The id of the webhook configs to use from the workspace.`,
							},
							"webhook_type": schema.StringAttribute{
								Computed:    true,
								Description: `must be one of ["dbtCloud"]`,
							},
							"dbt_cloud": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"account_id": schema.Int64Attribute{
										Computed:    true,
										Description: `The account id associated with the job`,
									},
									"job_id": schema.Int64Attribute{
										Computed:    true,
										Description: `The job id associated with the job`,
									},
								},
							},
							"execution_url": schema.StringAttribute{
								Computed:    true,
								Description: `DEPRECATED. Populate dbtCloud instead.`,
							},
							"execution_body": schema.StringAttribute{
								Computed:    true,
								Description: `DEPRECATED. Populate dbtCloud instead.`,
							},
						},
					},
				},
			},
			"workspace_id": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

func (r *OperationDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *OperationDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *OperationDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	operationID := data.OperationID.ValueString()
	request := shared.OperationIDRequestBody{
		OperationID: operationID,
	}
	res, err := r.client.Operation.GetOperation(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.OperationRead == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.OperationRead)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
