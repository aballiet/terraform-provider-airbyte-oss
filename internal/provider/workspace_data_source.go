// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk"
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk/pkg/models/shared"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &WorkspaceDataSource{}
var _ datasource.DataSourceWithConfigure = &WorkspaceDataSource{}

func NewWorkspaceDataSource() datasource.DataSource {
	return &WorkspaceDataSource{}
}

// WorkspaceDataSource is the data source implementation.
type WorkspaceDataSource struct {
	client *sdk.SDK
}

// WorkspaceDataSourceModel describes the data model.
type WorkspaceDataSourceModel struct {
	AnonymousDataCollection types.Bool            `tfsdk:"anonymous_data_collection"`
	CustomerID              types.String          `tfsdk:"customer_id"`
	DefaultGeography        types.String          `tfsdk:"default_geography"`
	DisplaySetupWizard      types.Bool            `tfsdk:"display_setup_wizard"`
	Email                   types.String          `tfsdk:"email"`
	FeedbackDone            types.Bool            `tfsdk:"feedback_done"`
	FirstCompletedSync      types.Bool            `tfsdk:"first_completed_sync"`
	InitialSetupComplete    types.Bool            `tfsdk:"initial_setup_complete"`
	Name                    types.String          `tfsdk:"name"`
	News                    types.Bool            `tfsdk:"news"`
	Notifications           []Notification        `tfsdk:"notifications"`
	NotificationSettings    *NotificationSettings `tfsdk:"notification_settings"`
	OrganizationID          types.String          `tfsdk:"organization_id"`
	SecurityUpdates         types.Bool            `tfsdk:"security_updates"`
	Slug                    types.String          `tfsdk:"slug"`
	WebhookConfigs          []WebhookConfigRead1  `tfsdk:"webhook_configs"`
	WorkspaceID             types.String          `tfsdk:"workspace_id"`
}

// Metadata returns the data source type name.
func (r *WorkspaceDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_workspace"
}

// Schema defines the schema for the data source.
func (r *WorkspaceDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Workspace DataSource",

		Attributes: map[string]schema.Attribute{
			"anonymous_data_collection": schema.BoolAttribute{
				Computed: true,
			},
			"customer_id": schema.StringAttribute{
				Computed: true,
			},
			"default_geography": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["auto", "us", "eu"]`,
			},
			"display_setup_wizard": schema.BoolAttribute{
				Computed: true,
			},
			"email": schema.StringAttribute{
				Computed: true,
			},
			"feedback_done": schema.BoolAttribute{
				Computed: true,
			},
			"first_completed_sync": schema.BoolAttribute{
				Computed: true,
			},
			"initial_setup_complete": schema.BoolAttribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed: true,
			},
			"news": schema.BoolAttribute{
				Computed: true,
			},
			"notifications": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"notification_type": schema.StringAttribute{
							Computed:    true,
							Description: `must be one of ["slack", "customerio"]`,
						},
						"send_on_success": schema.BoolAttribute{
							Computed:    true,
							Description: `Default: false`,
						},
						"send_on_failure": schema.BoolAttribute{
							Computed:    true,
							Description: `Default: true`,
						},
						"slack_configuration": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"webhook": schema.StringAttribute{
									Computed: true,
								},
							},
						},
						"customerio_configuration": schema.SingleNestedAttribute{
							Computed:   true,
							Attributes: map[string]schema.Attribute{},
						},
					},
				},
			},
			"notification_settings": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"send_on_success": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"notification_type": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"slack_configuration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"webhook": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"customerio_configuration": schema.SingleNestedAttribute{
								Computed:   true,
								Attributes: map[string]schema.Attribute{},
							},
						},
					},
					"send_on_failure": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"notification_type": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"slack_configuration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"webhook": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"customerio_configuration": schema.SingleNestedAttribute{
								Computed:   true,
								Attributes: map[string]schema.Attribute{},
							},
						},
					},
					"send_on_sync_disabled": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"notification_type": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"slack_configuration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"webhook": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"customerio_configuration": schema.SingleNestedAttribute{
								Computed:   true,
								Attributes: map[string]schema.Attribute{},
							},
						},
					},
					"send_on_sync_disabled_warning": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"notification_type": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"slack_configuration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"webhook": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"customerio_configuration": schema.SingleNestedAttribute{
								Computed:   true,
								Attributes: map[string]schema.Attribute{},
							},
						},
					},
					"send_on_connection_update": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"notification_type": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"slack_configuration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"webhook": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"customerio_configuration": schema.SingleNestedAttribute{
								Computed:   true,
								Attributes: map[string]schema.Attribute{},
							},
						},
					},
					"send_on_connection_update_action_required": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"notification_type": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"slack_configuration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"webhook": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"customerio_configuration": schema.SingleNestedAttribute{
								Computed:   true,
								Attributes: map[string]schema.Attribute{},
							},
						},
					},
					"send_on_breaking_change_warning": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"notification_type": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"slack_configuration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"webhook": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"customerio_configuration": schema.SingleNestedAttribute{
								Computed:   true,
								Attributes: map[string]schema.Attribute{},
							},
						},
					},
					"send_on_breaking_change_syncs_disabled": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"notification_type": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
							"slack_configuration": schema.SingleNestedAttribute{
								Computed: true,
								Attributes: map[string]schema.Attribute{
									"webhook": schema.StringAttribute{
										Computed: true,
									},
								},
							},
							"customerio_configuration": schema.SingleNestedAttribute{
								Computed:   true,
								Attributes: map[string]schema.Attribute{},
							},
						},
					},
				},
			},
			"organization_id": schema.StringAttribute{
				Computed: true,
			},
			"security_updates": schema.BoolAttribute{
				Computed: true,
			},
			"slug": schema.StringAttribute{
				Computed: true,
			},
			"webhook_configs": schema.ListNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"id": schema.StringAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed:    true,
							Description: `human-readable name e.g. for display in UI`,
						},
					},
				},
			},
			"workspace_id": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

func (r *WorkspaceDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *WorkspaceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *WorkspaceDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	workspaceID := data.WorkspaceID.ValueString()
	request := shared.WorkspaceIDRequestBody{
		WorkspaceID: workspaceID,
	}
	res, err := r.client.Workspace.GetWorkspace(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.WorkspaceRead == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.WorkspaceRead)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
