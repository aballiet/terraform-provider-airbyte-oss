// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceDefinitionResourceModel) ToSharedCustomSourceDefinitionCreate() *shared.CustomSourceDefinitionCreate {
	workspaceID := new(string)
	if !r.WorkspaceID.IsUnknown() && !r.WorkspaceID.IsNull() {
		*workspaceID = r.WorkspaceID.ValueString()
	} else {
		workspaceID = nil
	}
	scopeID := new(string)
	if !r.ScopeID.IsUnknown() && !r.ScopeID.IsNull() {
		*scopeID = r.ScopeID.ValueString()
	} else {
		scopeID = nil
	}
	scopeType := new(shared.ScopeType)
	if !r.ScopeType.IsUnknown() && !r.ScopeType.IsNull() {
		*scopeType = shared.ScopeType(r.ScopeType.ValueString())
	} else {
		scopeType = nil
	}
	name := r.SourceDefinition.Name.ValueString()
	dockerRepository := r.SourceDefinition.DockerRepository.ValueString()
	dockerImageTag := r.SourceDefinition.DockerImageTag.ValueString()
	documentationURL := r.SourceDefinition.DocumentationURL.ValueString()
	icon := new(string)
	if !r.SourceDefinition.Icon.IsUnknown() && !r.SourceDefinition.Icon.IsNull() {
		*icon = r.SourceDefinition.Icon.ValueString()
	} else {
		icon = nil
	}
	var resourceRequirements *shared.ActorDefinitionResourceRequirements
	if r.SourceDefinition.ResourceRequirements != nil {
		var defaultVar *shared.ResourceRequirements
		if r.SourceDefinition.ResourceRequirements.Default != nil {
			cpuRequest := new(string)
			if !r.SourceDefinition.ResourceRequirements.Default.CPURequest.IsUnknown() && !r.SourceDefinition.ResourceRequirements.Default.CPURequest.IsNull() {
				*cpuRequest = r.SourceDefinition.ResourceRequirements.Default.CPURequest.ValueString()
			} else {
				cpuRequest = nil
			}
			cpuLimit := new(string)
			if !r.SourceDefinition.ResourceRequirements.Default.CPULimit.IsUnknown() && !r.SourceDefinition.ResourceRequirements.Default.CPULimit.IsNull() {
				*cpuLimit = r.SourceDefinition.ResourceRequirements.Default.CPULimit.ValueString()
			} else {
				cpuLimit = nil
			}
			memoryRequest := new(string)
			if !r.SourceDefinition.ResourceRequirements.Default.MemoryRequest.IsUnknown() && !r.SourceDefinition.ResourceRequirements.Default.MemoryRequest.IsNull() {
				*memoryRequest = r.SourceDefinition.ResourceRequirements.Default.MemoryRequest.ValueString()
			} else {
				memoryRequest = nil
			}
			memoryLimit := new(string)
			if !r.SourceDefinition.ResourceRequirements.Default.MemoryLimit.IsUnknown() && !r.SourceDefinition.ResourceRequirements.Default.MemoryLimit.IsNull() {
				*memoryLimit = r.SourceDefinition.ResourceRequirements.Default.MemoryLimit.ValueString()
			} else {
				memoryLimit = nil
			}
			defaultVar = &shared.ResourceRequirements{
				CPURequest:    cpuRequest,
				CPULimit:      cpuLimit,
				MemoryRequest: memoryRequest,
				MemoryLimit:   memoryLimit,
			}
		}
		var jobSpecific []shared.JobTypeResourceLimit = nil
		for _, jobSpecificItem := range r.SourceDefinition.ResourceRequirements.JobSpecific {
			jobType := shared.JobType(jobSpecificItem.JobType.ValueString())
			cpuRequest1 := new(string)
			if !jobSpecificItem.ResourceRequirements.CPURequest.IsUnknown() && !jobSpecificItem.ResourceRequirements.CPURequest.IsNull() {
				*cpuRequest1 = jobSpecificItem.ResourceRequirements.CPURequest.ValueString()
			} else {
				cpuRequest1 = nil
			}
			cpuLimit1 := new(string)
			if !jobSpecificItem.ResourceRequirements.CPULimit.IsUnknown() && !jobSpecificItem.ResourceRequirements.CPULimit.IsNull() {
				*cpuLimit1 = jobSpecificItem.ResourceRequirements.CPULimit.ValueString()
			} else {
				cpuLimit1 = nil
			}
			memoryRequest1 := new(string)
			if !jobSpecificItem.ResourceRequirements.MemoryRequest.IsUnknown() && !jobSpecificItem.ResourceRequirements.MemoryRequest.IsNull() {
				*memoryRequest1 = jobSpecificItem.ResourceRequirements.MemoryRequest.ValueString()
			} else {
				memoryRequest1 = nil
			}
			memoryLimit1 := new(string)
			if !jobSpecificItem.ResourceRequirements.MemoryLimit.IsUnknown() && !jobSpecificItem.ResourceRequirements.MemoryLimit.IsNull() {
				*memoryLimit1 = jobSpecificItem.ResourceRequirements.MemoryLimit.ValueString()
			} else {
				memoryLimit1 = nil
			}
			resourceRequirements1 := shared.ResourceRequirements{
				CPURequest:    cpuRequest1,
				CPULimit:      cpuLimit1,
				MemoryRequest: memoryRequest1,
				MemoryLimit:   memoryLimit1,
			}
			jobSpecific = append(jobSpecific, shared.JobTypeResourceLimit{
				JobType:              jobType,
				ResourceRequirements: resourceRequirements1,
			})
		}
		resourceRequirements = &shared.ActorDefinitionResourceRequirements{
			Default:     defaultVar,
			JobSpecific: jobSpecific,
		}
	}
	sourceDefinition := shared.SourceDefinitionCreate{
		Name:                 name,
		DockerRepository:     dockerRepository,
		DockerImageTag:       dockerImageTag,
		DocumentationURL:     documentationURL,
		Icon:                 icon,
		ResourceRequirements: resourceRequirements,
	}
	out := shared.CustomSourceDefinitionCreate{
		WorkspaceID:      workspaceID,
		ScopeID:          scopeID,
		ScopeType:        scopeType,
		SourceDefinition: sourceDefinition,
	}
	return &out
}

func (r *SourceDefinitionResourceModel) RefreshFromSharedSourceDefinitionRead(resp *shared.SourceDefinitionRead) {
	r.Custom = types.BoolPointerValue(resp.Custom)
	r.DockerImageTag = types.StringValue(resp.DockerImageTag)
	r.DockerRepository = types.StringValue(resp.DockerRepository)
	r.DocumentationURL = types.StringPointerValue(resp.DocumentationURL)
	r.Icon = types.StringPointerValue(resp.Icon)
	r.MaxSecondsBetweenMessages = types.Int64PointerValue(resp.MaxSecondsBetweenMessages)
	r.Name = types.StringValue(resp.Name)
	r.ProtocolVersion = types.StringPointerValue(resp.ProtocolVersion)
	if resp.ReleaseDate != nil {
		r.ReleaseDate = types.StringValue(resp.ReleaseDate.String())
	} else {
		r.ReleaseDate = types.StringNull()
	}
	if resp.ReleaseStage != nil {
		r.ReleaseStage = types.StringValue(string(*resp.ReleaseStage))
	} else {
		r.ReleaseStage = types.StringNull()
	}
	if resp.ResourceRequirements == nil {
		r.ResourceRequirements = nil
	} else {
		r.ResourceRequirements = &ActorDefinitionResourceRequirements{}
		if resp.ResourceRequirements.Default == nil {
			r.ResourceRequirements.Default = nil
		} else {
			r.ResourceRequirements.Default = &ResourceRequirements{}
			r.ResourceRequirements.Default.CPULimit = types.StringPointerValue(resp.ResourceRequirements.Default.CPULimit)
			r.ResourceRequirements.Default.CPURequest = types.StringPointerValue(resp.ResourceRequirements.Default.CPURequest)
			r.ResourceRequirements.Default.MemoryLimit = types.StringPointerValue(resp.ResourceRequirements.Default.MemoryLimit)
			r.ResourceRequirements.Default.MemoryRequest = types.StringPointerValue(resp.ResourceRequirements.Default.MemoryRequest)
		}
		if len(r.ResourceRequirements.JobSpecific) > len(resp.ResourceRequirements.JobSpecific) {
			r.ResourceRequirements.JobSpecific = r.ResourceRequirements.JobSpecific[:len(resp.ResourceRequirements.JobSpecific)]
		}
		for jobSpecificCount, jobSpecificItem := range resp.ResourceRequirements.JobSpecific {
			var jobSpecific1 JobTypeResourceLimit
			jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
			jobSpecific1.ResourceRequirements.CPULimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPULimit)
			jobSpecific1.ResourceRequirements.CPURequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.CPURequest)
			jobSpecific1.ResourceRequirements.MemoryLimit = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryLimit)
			jobSpecific1.ResourceRequirements.MemoryRequest = types.StringPointerValue(jobSpecificItem.ResourceRequirements.MemoryRequest)
			if jobSpecificCount+1 > len(r.ResourceRequirements.JobSpecific) {
				r.ResourceRequirements.JobSpecific = append(r.ResourceRequirements.JobSpecific, jobSpecific1)
			} else {
				r.ResourceRequirements.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
				r.ResourceRequirements.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
			}
		}
	}
	r.SourceDefinitionID = types.StringValue(resp.SourceDefinitionID)
	if resp.SourceType != nil {
		r.SourceType = types.StringValue(string(*resp.SourceType))
	} else {
		r.SourceType = types.StringNull()
	}
	if resp.SupportLevel != nil {
		r.SupportLevel = types.StringValue(string(*resp.SupportLevel))
	} else {
		r.SupportLevel = types.StringNull()
	}
}

func (r *SourceDefinitionResourceModel) ToSharedSourceDefinitionIDRequestBody() *shared.SourceDefinitionIDRequestBody {
	sourceDefinitionID := r.SourceDefinitionID.ValueString()
	out := shared.SourceDefinitionIDRequestBody{
		SourceDefinitionID: sourceDefinitionID,
	}
	return &out
}

func (r *SourceDefinitionResourceModel) ToSharedSourceDefinitionUpdate() *shared.SourceDefinitionUpdate {
	sourceDefinitionID := r.SourceDefinitionID.ValueString()
	dockerImageTag := r.DockerImageTag.ValueString()
	var resourceRequirements *shared.ActorDefinitionResourceRequirements
	if r.ResourceRequirements != nil {
		var defaultVar *shared.ResourceRequirements
		if r.ResourceRequirements.Default != nil {
			cpuRequest := new(string)
			if !r.ResourceRequirements.Default.CPURequest.IsUnknown() && !r.ResourceRequirements.Default.CPURequest.IsNull() {
				*cpuRequest = r.ResourceRequirements.Default.CPURequest.ValueString()
			} else {
				cpuRequest = nil
			}
			cpuLimit := new(string)
			if !r.ResourceRequirements.Default.CPULimit.IsUnknown() && !r.ResourceRequirements.Default.CPULimit.IsNull() {
				*cpuLimit = r.ResourceRequirements.Default.CPULimit.ValueString()
			} else {
				cpuLimit = nil
			}
			memoryRequest := new(string)
			if !r.ResourceRequirements.Default.MemoryRequest.IsUnknown() && !r.ResourceRequirements.Default.MemoryRequest.IsNull() {
				*memoryRequest = r.ResourceRequirements.Default.MemoryRequest.ValueString()
			} else {
				memoryRequest = nil
			}
			memoryLimit := new(string)
			if !r.ResourceRequirements.Default.MemoryLimit.IsUnknown() && !r.ResourceRequirements.Default.MemoryLimit.IsNull() {
				*memoryLimit = r.ResourceRequirements.Default.MemoryLimit.ValueString()
			} else {
				memoryLimit = nil
			}
			defaultVar = &shared.ResourceRequirements{
				CPURequest:    cpuRequest,
				CPULimit:      cpuLimit,
				MemoryRequest: memoryRequest,
				MemoryLimit:   memoryLimit,
			}
		}
		var jobSpecific []shared.JobTypeResourceLimit = nil
		for _, jobSpecificItem := range r.ResourceRequirements.JobSpecific {
			jobType := shared.JobType(jobSpecificItem.JobType.ValueString())
			cpuRequest1 := new(string)
			if !jobSpecificItem.ResourceRequirements.CPURequest.IsUnknown() && !jobSpecificItem.ResourceRequirements.CPURequest.IsNull() {
				*cpuRequest1 = jobSpecificItem.ResourceRequirements.CPURequest.ValueString()
			} else {
				cpuRequest1 = nil
			}
			cpuLimit1 := new(string)
			if !jobSpecificItem.ResourceRequirements.CPULimit.IsUnknown() && !jobSpecificItem.ResourceRequirements.CPULimit.IsNull() {
				*cpuLimit1 = jobSpecificItem.ResourceRequirements.CPULimit.ValueString()
			} else {
				cpuLimit1 = nil
			}
			memoryRequest1 := new(string)
			if !jobSpecificItem.ResourceRequirements.MemoryRequest.IsUnknown() && !jobSpecificItem.ResourceRequirements.MemoryRequest.IsNull() {
				*memoryRequest1 = jobSpecificItem.ResourceRequirements.MemoryRequest.ValueString()
			} else {
				memoryRequest1 = nil
			}
			memoryLimit1 := new(string)
			if !jobSpecificItem.ResourceRequirements.MemoryLimit.IsUnknown() && !jobSpecificItem.ResourceRequirements.MemoryLimit.IsNull() {
				*memoryLimit1 = jobSpecificItem.ResourceRequirements.MemoryLimit.ValueString()
			} else {
				memoryLimit1 = nil
			}
			resourceRequirements1 := shared.ResourceRequirements{
				CPURequest:    cpuRequest1,
				CPULimit:      cpuLimit1,
				MemoryRequest: memoryRequest1,
				MemoryLimit:   memoryLimit1,
			}
			jobSpecific = append(jobSpecific, shared.JobTypeResourceLimit{
				JobType:              jobType,
				ResourceRequirements: resourceRequirements1,
			})
		}
		resourceRequirements = &shared.ActorDefinitionResourceRequirements{
			Default:     defaultVar,
			JobSpecific: jobSpecific,
		}
	}
	out := shared.SourceDefinitionUpdate{
		SourceDefinitionID:   sourceDefinitionID,
		DockerImageTag:       dockerImageTag,
		ResourceRequirements: resourceRequirements,
	}
	return &out
}
