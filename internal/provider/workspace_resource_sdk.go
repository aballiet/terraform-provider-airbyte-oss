// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *WorkspaceResourceModel) ToCreateSDKType() *shared.WorkspaceCreate {
	anonymousDataCollection := new(bool)
	if !r.AnonymousDataCollection.IsUnknown() && !r.AnonymousDataCollection.IsNull() {
		*anonymousDataCollection = r.AnonymousDataCollection.ValueBool()
	} else {
		anonymousDataCollection = nil
	}
	defaultGeography := new(shared.Geography)
	if !r.DefaultGeography.IsUnknown() && !r.DefaultGeography.IsNull() {
		*defaultGeography = shared.Geography(r.DefaultGeography.ValueString())
	} else {
		defaultGeography = nil
	}
	displaySetupWizard := new(bool)
	if !r.DisplaySetupWizard.IsUnknown() && !r.DisplaySetupWizard.IsNull() {
		*displaySetupWizard = r.DisplaySetupWizard.ValueBool()
	} else {
		displaySetupWizard = nil
	}
	email := new(string)
	if !r.Email.IsUnknown() && !r.Email.IsNull() {
		*email = r.Email.ValueString()
	} else {
		email = nil
	}
	name := r.Name.ValueString()
	news := new(bool)
	if !r.News.IsUnknown() && !r.News.IsNull() {
		*news = r.News.ValueBool()
	} else {
		news = nil
	}
	notifications := make([]shared.Notification, 0)
	for _, notificationsItem := range r.Notifications {
		var customerioConfiguration *shared.CustomerioNotificationConfiguration
		if notificationsItem.CustomerioConfiguration != nil {
			customerioConfiguration = &shared.CustomerioNotificationConfiguration{}
		}
		notificationType := shared.NotificationType(notificationsItem.NotificationType.ValueString())
		sendOnFailure := notificationsItem.SendOnFailure.ValueBool()
		sendOnSuccess := notificationsItem.SendOnSuccess.ValueBool()
		var slackConfiguration *shared.SlackNotificationConfiguration
		if notificationsItem.SlackConfiguration != nil {
			webhook := notificationsItem.SlackConfiguration.Webhook.ValueString()
			slackConfiguration = &shared.SlackNotificationConfiguration{
				Webhook: webhook,
			}
		}
		notifications = append(notifications, shared.Notification{
			CustomerioConfiguration: customerioConfiguration,
			NotificationType:        notificationType,
			SendOnFailure:           sendOnFailure,
			SendOnSuccess:           sendOnSuccess,
			SlackConfiguration:      slackConfiguration,
		})
	}
	securityUpdates := new(bool)
	if !r.SecurityUpdates.IsUnknown() && !r.SecurityUpdates.IsNull() {
		*securityUpdates = r.SecurityUpdates.ValueBool()
	} else {
		securityUpdates = nil
	}
	webhookConfigs := make([]shared.WebhookConfigWrite, 0)
	for _, webhookConfigsItem := range r.WebhookConfigs {
		authToken := new(string)
		if !webhookConfigsItem.Name.IsUnknown() && !webhookConfigsItem.Name.IsNull() {
			*authToken = webhookConfigsItem.Name.ValueString()
		} else {
			authToken = nil
		}
		name1 := new(string)
		if !webhookConfigsItem.Name.IsUnknown() && !webhookConfigsItem.Name.IsNull() {
			*name1 = webhookConfigsItem.Name.ValueString()
		} else {
			name1 = nil
		}
		webhookConfigs = append(webhookConfigs, shared.WebhookConfigWrite{
			AuthToken: authToken,
			Name:      name1,
		})
	}
	out := shared.WorkspaceCreate{
		AnonymousDataCollection: anonymousDataCollection,
		DefaultGeography:        defaultGeography,
		DisplaySetupWizard:      displaySetupWizard,
		Email:                   email,
		Name:                    name,
		News:                    news,
		Notifications:           notifications,
		SecurityUpdates:         securityUpdates,
		WebhookConfigs:          webhookConfigs,
	}
	return &out
}

func (r *WorkspaceResourceModel) ToUpdateSDKType() *shared.WorkspaceUpdate {
	anonymousDataCollection := new(bool)
	if !r.AnonymousDataCollection.IsUnknown() && !r.AnonymousDataCollection.IsNull() {
		*anonymousDataCollection = r.AnonymousDataCollection.ValueBool()
	} else {
		anonymousDataCollection = nil
	}
	defaultGeography := new(shared.Geography)
	if !r.DefaultGeography.IsUnknown() && !r.DefaultGeography.IsNull() {
		*defaultGeography = shared.Geography(r.DefaultGeography.ValueString())
	} else {
		defaultGeography = nil
	}
	displaySetupWizard := new(bool)
	if !r.DisplaySetupWizard.IsUnknown() && !r.DisplaySetupWizard.IsNull() {
		*displaySetupWizard = r.DisplaySetupWizard.ValueBool()
	} else {
		displaySetupWizard = nil
	}
	email := new(string)
	if !r.Email.IsUnknown() && !r.Email.IsNull() {
		*email = r.Email.ValueString()
	} else {
		email = nil
	}
	initialSetupComplete := new(bool)
	if !r.InitialSetupComplete.IsUnknown() && !r.InitialSetupComplete.IsNull() {
		*initialSetupComplete = r.InitialSetupComplete.ValueBool()
	} else {
		initialSetupComplete = nil
	}
	news := new(bool)
	if !r.News.IsUnknown() && !r.News.IsNull() {
		*news = r.News.ValueBool()
	} else {
		news = nil
	}
	notifications := make([]shared.Notification, 0)
	for _, notificationsItem := range r.Notifications {
		var customerioConfiguration *shared.CustomerioNotificationConfiguration
		if notificationsItem.CustomerioConfiguration != nil {
			customerioConfiguration = &shared.CustomerioNotificationConfiguration{}
		}
		notificationType := shared.NotificationType(notificationsItem.NotificationType.ValueString())
		sendOnFailure := notificationsItem.SendOnFailure.ValueBool()
		sendOnSuccess := notificationsItem.SendOnSuccess.ValueBool()
		var slackConfiguration *shared.SlackNotificationConfiguration
		if notificationsItem.SlackConfiguration != nil {
			webhook := notificationsItem.SlackConfiguration.Webhook.ValueString()
			slackConfiguration = &shared.SlackNotificationConfiguration{
				Webhook: webhook,
			}
		}
		notifications = append(notifications, shared.Notification{
			CustomerioConfiguration: customerioConfiguration,
			NotificationType:        notificationType,
			SendOnFailure:           sendOnFailure,
			SendOnSuccess:           sendOnSuccess,
			SlackConfiguration:      slackConfiguration,
		})
	}
	securityUpdates := new(bool)
	if !r.SecurityUpdates.IsUnknown() && !r.SecurityUpdates.IsNull() {
		*securityUpdates = r.SecurityUpdates.ValueBool()
	} else {
		securityUpdates = nil
	}
	webhookConfigs := make([]shared.WebhookConfigWrite, 0)
	for _, webhookConfigsItem := range r.WebhookConfigs {
		authToken := new(string)
		if !webhookConfigsItem.Name.IsUnknown() && !webhookConfigsItem.Name.IsNull() {
			*authToken = webhookConfigsItem.Name.ValueString()
		} else {
			authToken = nil
		}
		name := new(string)
		if !webhookConfigsItem.Name.IsUnknown() && !webhookConfigsItem.Name.IsNull() {
			*name = webhookConfigsItem.Name.ValueString()
		} else {
			name = nil
		}
		webhookConfigs = append(webhookConfigs, shared.WebhookConfigWrite{
			AuthToken: authToken,
			Name:      name,
		})
	}
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.WorkspaceUpdate{
		AnonymousDataCollection: anonymousDataCollection,
		DefaultGeography:        defaultGeography,
		DisplaySetupWizard:      displaySetupWizard,
		Email:                   email,
		InitialSetupComplete:    initialSetupComplete,
		News:                    news,
		Notifications:           notifications,
		SecurityUpdates:         securityUpdates,
		WebhookConfigs:          webhookConfigs,
		WorkspaceID:             workspaceID,
	}
	return &out
}

func (r *WorkspaceResourceModel) ToDeleteSDKType() *shared.WorkspaceIDRequestBody {
	workspaceID := r.WorkspaceID.ValueString()
	out := shared.WorkspaceIDRequestBody{
		WorkspaceID: workspaceID,
	}
	return &out
}

func (r *WorkspaceResourceModel) RefreshFromCreateResponse(resp *shared.InvalidInputExceptionInfo) {
	if resp.ExceptionClassName != nil {
		r.ExceptionClassName = types.StringValue(*resp.ExceptionClassName)
	} else {
		r.ExceptionClassName = types.StringNull()
	}
	r.ExceptionStack = nil
	for _, v := range resp.ExceptionStack {
		r.ExceptionStack = append(r.ExceptionStack, types.StringValue(v))
	}
	r.Message = types.StringValue(resp.Message)
	r.ValidationErrors = nil
	for _, validationErrorsItem := range resp.ValidationErrors {
		var validationErrors1 InvalidInputProperty
		if validationErrorsItem.InvalidValue != nil {
			validationErrors1.InvalidValue = types.StringValue(*validationErrorsItem.InvalidValue)
		} else {
			validationErrors1.InvalidValue = types.StringNull()
		}
		if validationErrorsItem.Message != nil {
			validationErrors1.Message = types.StringValue(*validationErrorsItem.Message)
		} else {
			validationErrors1.Message = types.StringNull()
		}
		validationErrors1.PropertyPath = types.StringValue(validationErrorsItem.PropertyPath)
		r.ValidationErrors = append(r.ValidationErrors, validationErrors1)
	}
}

func (r *WorkspaceResourceModel) RefreshFromUpdateResponse(resp *shared.InvalidInputExceptionInfo) {
	r.RefreshFromCreateResponse(resp)
}
