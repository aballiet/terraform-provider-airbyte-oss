// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	speakeasy_stringplanmodifier "github.com/aballiet/terraform-provider-airbyte/internal/planmodifiers/stringplanmodifier"
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk"
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/aballiet/terraform-provider-airbyte/internal/validators"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &SourceDefinitionResource{}
var _ resource.ResourceWithImportState = &SourceDefinitionResource{}

func NewSourceDefinitionResource() resource.Resource {
	return &SourceDefinitionResource{}
}

// SourceDefinitionResource defines the resource implementation.
type SourceDefinitionResource struct {
	client *sdk.SDK
}

// SourceDefinitionResourceModel describes the resource data model.
type SourceDefinitionResourceModel struct {
	CPULimit                  types.String                         `tfsdk:"cpu_limit"`
	CPURequest                types.String                         `tfsdk:"cpu_request"`
	Custom                    types.Bool                           `tfsdk:"custom"`
	DockerImageTag            types.String                         `tfsdk:"docker_image_tag"`
	DockerRepository          types.String                         `tfsdk:"docker_repository"`
	DocumentationURL          types.String                         `tfsdk:"documentation_url"`
	Icon                      types.String                         `tfsdk:"icon"`
	JobType                   types.String                         `tfsdk:"job_type"`
	MaxSecondsBetweenMessages types.Int64                          `tfsdk:"max_seconds_between_messages"`
	MemoryLimit               types.String                         `tfsdk:"memory_limit"`
	MemoryRequest             types.String                         `tfsdk:"memory_request"`
	Name                      types.String                         `tfsdk:"name"`
	ProtocolVersion           types.String                         `tfsdk:"protocol_version"`
	ReleaseDate               types.String                         `tfsdk:"release_date"`
	ReleaseStage              types.String                         `tfsdk:"release_stage"`
	ResourceRequirements      *ActorDefinitionResourceRequirements `tfsdk:"resource_requirements"`
	ScopeID                   types.String                         `tfsdk:"scope_id"`
	ScopeType                 types.String                         `tfsdk:"scope_type"`
	SourceDefinitionID        types.String                         `tfsdk:"source_definition_id"`
	SourceType                types.String                         `tfsdk:"source_type"`
	SupportLevel              types.String                         `tfsdk:"support_level"`
	WorkspaceID               types.String                         `tfsdk:"workspace_id"`
}

func (r *SourceDefinitionResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_source_definition"
}

func (r *SourceDefinitionResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SourceDefinition Resource",

		Attributes: map[string]schema.Attribute{
			"cpu_limit": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"cpu_request": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"custom": schema.BoolAttribute{
				Computed:    true,
				Description: `Whether the connector is custom or not`,
			},
			"docker_image_tag": schema.StringAttribute{
				Required: true,
			},
			"docker_repository": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"documentation_url": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"icon": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"job_type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Required:    true,
				Description: `enum that describes the different types of jobs that the platform runs. Requires replacement if changed. ; must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"get_spec",
						"check_connection",
						"discover_schema",
						"sync",
						"reset_connection",
						"connection_updater",
						"replicate",
					),
				},
			},
			"max_seconds_between_messages": schema.Int64Attribute{
				Computed:    true,
				Description: `Number of seconds allowed between 2 airbyte protocol messages. The source will timeout if this delay is reach`,
			},
			"memory_limit": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"memory_request": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"name": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					speakeasy_stringplanmodifier.SuppressDiff(speakeasy_stringplanmodifier.ExplicitSuppress),
				},
				Required:    true,
				Description: `Requires replacement if changed. `,
			},
			"protocol_version": schema.StringAttribute{
				Computed:    true,
				Description: `The Airbyte Protocol version supported by the connector`,
			},
			"release_date": schema.StringAttribute{
				Computed:    true,
				Description: `The date when this connector was first released, in yyyy-mm-dd format.`,
				Validators: []validator.String{
					validators.IsValidDate(),
				},
			},
			"release_stage": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["alpha", "beta", "generally_available", "custom"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"alpha",
						"beta",
						"generally_available",
						"custom",
					),
				},
			},
			"resource_requirements": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"default": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"cpu_limit": schema.StringAttribute{
								Computed: true,
							},
							"cpu_request": schema.StringAttribute{
								Computed: true,
							},
							"memory_limit": schema.StringAttribute{
								Computed: true,
							},
							"memory_request": schema.StringAttribute{
								Computed: true,
							},
						},
						Description: `optional resource requirements to run workers (blank for unbounded allocations)`,
					},
					"job_specific": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"job_type": schema.StringAttribute{
									Computed:    true,
									Description: `enum that describes the different types of jobs that the platform runs. must be one of ["get_spec", "check_connection", "discover_schema", "sync", "reset_connection", "connection_updater", "replicate"]`,
									Validators: []validator.String{
										stringvalidator.OneOf(
											"get_spec",
											"check_connection",
											"discover_schema",
											"sync",
											"reset_connection",
											"connection_updater",
											"replicate",
										),
									},
								},
								"resource_requirements": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"cpu_limit": schema.StringAttribute{
											Computed: true,
										},
										"cpu_request": schema.StringAttribute{
											Computed: true,
										},
										"memory_limit": schema.StringAttribute{
											Computed: true,
										},
										"memory_request": schema.StringAttribute{
											Computed: true,
										},
									},
									Description: `optional resource requirements to run workers (blank for unbounded allocations)`,
								},
							},
						},
					},
				},
				Description: `actor definition specific resource requirements. if default is set, these are the requirements that should be set for ALL jobs run for this actor definition. it is overriden by the job type specific configurations. if not set, the platform will use defaults. these values will be overriden by configuration at the connection level.`,
			},
			"scope_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
			"scope_type": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. ; must be one of ["workspace", "organization"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"workspace",
						"organization",
					),
				},
			},
			"source_definition_id": schema.StringAttribute{
				Computed: true,
			},
			"source_type": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["api", "file", "database", "custom"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"api",
						"file",
						"database",
						"custom",
					),
				},
			},
			"support_level": schema.StringAttribute{
				Computed:    true,
				Description: `must be one of ["community", "certified", "none"]`,
				Validators: []validator.String{
					stringvalidator.OneOf(
						"community",
						"certified",
						"none",
					),
				},
			},
			"workspace_id": schema.StringAttribute{
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
				},
				Optional:    true,
				Description: `Requires replacement if changed. `,
			},
		},
	}
}

func (r *SourceDefinitionResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SourceDefinitionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *SourceDefinitionResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(plan.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	var request *shared.CustomSourceDefinitionCreate
	workspaceID := new(string)
	if !data.WorkspaceID.IsUnknown() && !data.WorkspaceID.IsNull() {
		*workspaceID = data.WorkspaceID.ValueString()
	} else {
		workspaceID = nil
	}
	scopeID := new(string)
	if !data.ScopeID.IsUnknown() && !data.ScopeID.IsNull() {
		*scopeID = data.ScopeID.ValueString()
	} else {
		scopeID = nil
	}
	scopeType := new(shared.ScopeType)
	if !data.ScopeType.IsUnknown() && !data.ScopeType.IsNull() {
		*scopeType = shared.ScopeType(data.ScopeType.ValueString())
	} else {
		scopeType = nil
	}
	name := data.Name.ValueString()
	dockerRepository := data.DockerRepository.ValueString()
	dockerImageTag := data.DockerImageTag.ValueString()
	documentationURL := data.DocumentationURL.ValueString()
	icon := new(string)
	if !data.Icon.IsUnknown() && !data.Icon.IsNull() {
		*icon = data.Icon.ValueString()
	} else {
		icon = nil
	}
	var resourceRequirements *shared.ActorDefinitionResourceRequirements
	if data != nil {
		var defaultVar *shared.ResourceRequirements
		if data != nil {
			cpuRequest := new(string)
			if !data.CPURequest.IsUnknown() && !data.CPURequest.IsNull() {
				*cpuRequest = data.CPURequest.ValueString()
			} else {
				cpuRequest = nil
			}
			cpuLimit := new(string)
			if !data.CPULimit.IsUnknown() && !data.CPULimit.IsNull() {
				*cpuLimit = data.CPULimit.ValueString()
			} else {
				cpuLimit = nil
			}
			memoryRequest := new(string)
			if !data.MemoryRequest.IsUnknown() && !data.MemoryRequest.IsNull() {
				*memoryRequest = data.MemoryRequest.ValueString()
			} else {
				memoryRequest = nil
			}
			memoryLimit := new(string)
			if !data.MemoryLimit.IsUnknown() && !data.MemoryLimit.IsNull() {
				*memoryLimit = data.MemoryLimit.ValueString()
			} else {
				memoryLimit = nil
			}
			defaultVar = &shared.ResourceRequirements{
				CPURequest:    cpuRequest,
				CPULimit:      cpuLimit,
				MemoryRequest: memoryRequest,
				MemoryLimit:   memoryLimit,
			}
		}
		var jobType *shared.JobType
		var cpuRequest1 *string
		var cpuLimit1 *string
		var memoryRequest1 *string
		var memoryLimit1 *string
		resourceRequirements1 := shared.ResourceRequirements{
			CPURequest:    cpuRequest1,
			CPULimit:      cpuLimit1,
			MemoryRequest: memoryRequest1,
			MemoryLimit:   memoryLimit1,
		}
		jobSpecificSingleton := shared.JobTypeResourceLimit{
			JobType:              jobType,
			ResourceRequirements: resourceRequirements1,
		}
		jobSpecific := []shared.JobTypeResourceLimit{jobSpecificSingleton}
		resourceRequirements = &shared.ActorDefinitionResourceRequirements{
			Default:     defaultVar,
			JobSpecific: jobSpecific,
		}
	}
	sourceDefinition := shared.SourceDefinitionCreate{
		Name:                 name,
		DockerRepository:     dockerRepository,
		DockerImageTag:       dockerImageTag,
		DocumentationURL:     documentationURL,
		Icon:                 icon,
		ResourceRequirements: resourceRequirements,
	}
	request = &shared.CustomSourceDefinitionCreate{
		WorkspaceID:      workspaceID,
		ScopeID:          scopeID,
		ScopeType:        scopeType,
		SourceDefinition: sourceDefinition,
	}
	res, err := r.client.SourceDefinition.CreateCustomSourceDefinition(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceDefinitionRead == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedSourceDefinitionRead(res.SourceDefinitionRead)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)
	request1 := *data.ToSharedSourceDefinitionIDRequestBody()
	res1, err := r.client.SourceDefinition.GetSourceDefinition(ctx, request1)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res1 != nil && res1.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res1.RawResponse))
		}
		return
	}
	if res1 == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res1))
		return
	}
	if res1.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res1.StatusCode), debugResponse(res1.RawResponse))
		return
	}
	if res1.SourceDefinitionRead == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res1.RawResponse))
		return
	}
	data.RefreshFromSharedSourceDefinitionRead(res1.SourceDefinitionRead)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceDefinitionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *SourceDefinitionResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedSourceDefinitionIDRequestBody()
	res, err := r.client.SourceDefinition.GetSourceDefinition(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceDefinitionRead == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedSourceDefinitionRead(res.SourceDefinitionRead)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceDefinitionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *SourceDefinitionResourceModel
	var plan types.Object

	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	merge(ctx, req, resp, &data)
	if resp.Diagnostics.HasError() {
		return
	}

	request := data.ToSharedSourceDefinitionUpdate()
	res, err := r.client.SourceDefinition.UpdateSourceDefinition(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceDefinitionRead == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedSourceDefinitionRead(res.SourceDefinitionRead)
	refreshPlan(ctx, plan, &data, resp.Diagnostics)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *SourceDefinitionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *SourceDefinitionResourceModel
	var item types.Object

	resp.Diagnostics.Append(req.State.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToSharedSourceDefinitionIDRequestBody()
	res, err := r.client.SourceDefinition.DeleteSourceDefinition(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 204 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}

}

func (r *SourceDefinitionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resp.Diagnostics.AddError("Not Implemented", "No available import state operation is available for resource source_definition. Reason: composite imports strings not supported.")
}
