// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *SourceDefinitionDataSourceModel) ToGetSDKType() *shared.SourceDefinitionIDRequestBody {
	sourceDefinitionID := r.SourceDefinitionID.ValueString()
	out := shared.SourceDefinitionIDRequestBody{
		SourceDefinitionID: sourceDefinitionID,
	}
	return &out
}

func (r *SourceDefinitionDataSourceModel) RefreshFromGetResponse(resp *shared.SourceDefinitionRead) {
	if resp.Custom != nil {
		r.Custom = types.BoolValue(*resp.Custom)
	} else {
		r.Custom = types.BoolNull()
	}
	r.DockerImageTag = types.StringValue(resp.DockerImageTag)
	r.DockerRepository = types.StringValue(resp.DockerRepository)
	if resp.DocumentationURL != nil {
		r.DocumentationURL = types.StringValue(*resp.DocumentationURL)
	} else {
		r.DocumentationURL = types.StringNull()
	}
	if resp.Icon != nil {
		r.Icon = types.StringValue(*resp.Icon)
	} else {
		r.Icon = types.StringNull()
	}
	if resp.MaxSecondsBetweenMessages != nil {
		r.MaxSecondsBetweenMessages = types.Int64Value(*resp.MaxSecondsBetweenMessages)
	} else {
		r.MaxSecondsBetweenMessages = types.Int64Null()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.ProtocolVersion != nil {
		r.ProtocolVersion = types.StringValue(*resp.ProtocolVersion)
	} else {
		r.ProtocolVersion = types.StringNull()
	}
	if resp.ReleaseDate != nil {
		r.ReleaseDate = types.StringValue(resp.ReleaseDate.String())
	} else {
		r.ReleaseDate = types.StringNull()
	}
	if resp.ReleaseStage != nil {
		r.ReleaseStage = types.StringValue(string(*resp.ReleaseStage))
	} else {
		r.ReleaseStage = types.StringNull()
	}
	if resp.ResourceRequirements == nil {
		r.ResourceRequirements = nil
	} else {
		r.ResourceRequirements = &ActorDefinitionResourceRequirements{}
		if resp.ResourceRequirements.Default == nil {
			r.ResourceRequirements.Default = nil
		} else {
			r.ResourceRequirements.Default = &ResourceRequirements{}
			if resp.ResourceRequirements.Default.CPURequest != nil {
				r.ResourceRequirements.Default.CPURequest = types.StringValue(*resp.ResourceRequirements.Default.CPURequest)
			} else {
				r.ResourceRequirements.Default.CPURequest = types.StringNull()
			}
			if resp.ResourceRequirements.Default.CPULimit != nil {
				r.ResourceRequirements.Default.CPULimit = types.StringValue(*resp.ResourceRequirements.Default.CPULimit)
			} else {
				r.ResourceRequirements.Default.CPULimit = types.StringNull()
			}
			if resp.ResourceRequirements.Default.MemoryRequest != nil {
				r.ResourceRequirements.Default.MemoryRequest = types.StringValue(*resp.ResourceRequirements.Default.MemoryRequest)
			} else {
				r.ResourceRequirements.Default.MemoryRequest = types.StringNull()
			}
			if resp.ResourceRequirements.Default.MemoryLimit != nil {
				r.ResourceRequirements.Default.MemoryLimit = types.StringValue(*resp.ResourceRequirements.Default.MemoryLimit)
			} else {
				r.ResourceRequirements.Default.MemoryLimit = types.StringNull()
			}
		}
		if len(r.ResourceRequirements.JobSpecific) > len(resp.ResourceRequirements.JobSpecific) {
			r.ResourceRequirements.JobSpecific = r.ResourceRequirements.JobSpecific[:len(resp.ResourceRequirements.JobSpecific)]
		}
		for jobSpecificCount, jobSpecificItem := range resp.ResourceRequirements.JobSpecific {
			var jobSpecific1 JobTypeResourceLimit
			jobSpecific1.JobType = types.StringValue(string(jobSpecificItem.JobType))
			if jobSpecificItem.ResourceRequirements.CPURequest != nil {
				jobSpecific1.ResourceRequirements.CPURequest = types.StringValue(*jobSpecificItem.ResourceRequirements.CPURequest)
			} else {
				jobSpecific1.ResourceRequirements.CPURequest = types.StringNull()
			}
			if jobSpecificItem.ResourceRequirements.CPULimit != nil {
				jobSpecific1.ResourceRequirements.CPULimit = types.StringValue(*jobSpecificItem.ResourceRequirements.CPULimit)
			} else {
				jobSpecific1.ResourceRequirements.CPULimit = types.StringNull()
			}
			if jobSpecificItem.ResourceRequirements.MemoryRequest != nil {
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringValue(*jobSpecificItem.ResourceRequirements.MemoryRequest)
			} else {
				jobSpecific1.ResourceRequirements.MemoryRequest = types.StringNull()
			}
			if jobSpecificItem.ResourceRequirements.MemoryLimit != nil {
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringValue(*jobSpecificItem.ResourceRequirements.MemoryLimit)
			} else {
				jobSpecific1.ResourceRequirements.MemoryLimit = types.StringNull()
			}
			if jobSpecificCount+1 > len(r.ResourceRequirements.JobSpecific) {
				r.ResourceRequirements.JobSpecific = append(r.ResourceRequirements.JobSpecific, jobSpecific1)
			} else {
				r.ResourceRequirements.JobSpecific[jobSpecificCount].JobType = jobSpecific1.JobType
				r.ResourceRequirements.JobSpecific[jobSpecificCount].ResourceRequirements = jobSpecific1.ResourceRequirements
			}
		}
	}
	r.SourceDefinitionID = types.StringValue(resp.SourceDefinitionID)
	if resp.SourceType != nil {
		r.SourceType = types.StringValue(string(*resp.SourceType))
	} else {
		r.SourceType = types.StringNull()
	}
	if resp.SupportLevel != nil {
		r.SupportLevel = types.StringValue(string(*resp.SupportLevel))
	} else {
		r.SupportLevel = types.StringNull()
	}
}
