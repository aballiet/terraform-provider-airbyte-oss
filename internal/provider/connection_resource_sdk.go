// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *ConnectionResourceModel) ToCreateSDKType() *shared.ConnectionCreate {
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	namespaceDefinition := new(shared.NamespaceDefinitionType)
	if !r.NamespaceDefinition.IsUnknown() && !r.NamespaceDefinition.IsNull() {
		*namespaceDefinition = shared.NamespaceDefinitionType(r.NamespaceDefinition.ValueString())
	} else {
		namespaceDefinition = nil
	}
	namespaceFormat := new(string)
	if !r.NamespaceFormat.IsUnknown() && !r.NamespaceFormat.IsNull() {
		*namespaceFormat = r.NamespaceFormat.ValueString()
	} else {
		namespaceFormat = nil
	}
	prefix := new(string)
	if !r.Prefix.IsUnknown() && !r.Prefix.IsNull() {
		*prefix = r.Prefix.ValueString()
	} else {
		prefix = nil
	}
	sourceID := r.SourceID.ValueString()
	destinationID := r.DestinationID.ValueString()
	var operationIds []string = nil
	for _, operationIdsItem := range r.OperationIds {
		operationIds = append(operationIds, operationIdsItem.ValueString())
	}
	var syncCatalog *shared.AirbyteCatalog
	if r.SyncCatalog != nil {
		var streams []shared.AirbyteStreamAndConfiguration = nil
		for _, streamsItem := range r.SyncCatalog.Streams {
			var stream *shared.AirbyteStream
			if streamsItem.Stream != nil {
				name1 := streamsItem.Stream.Name.ValueString()
				var jsonSchema *shared.StreamJSONSchema
				if streamsItem.Stream.JSONSchema != nil {
					jsonSchema = &shared.StreamJSONSchema{}
				}
				var supportedSyncModes []shared.SyncMode = nil
				for _, supportedSyncModesItem := range streamsItem.Stream.SupportedSyncModes {
					supportedSyncModes = append(supportedSyncModes, shared.SyncMode(supportedSyncModesItem.ValueString()))
				}
				sourceDefinedCursor := new(bool)
				if !streamsItem.Stream.SourceDefinedCursor.IsUnknown() && !streamsItem.Stream.SourceDefinedCursor.IsNull() {
					*sourceDefinedCursor = streamsItem.Stream.SourceDefinedCursor.ValueBool()
				} else {
					sourceDefinedCursor = nil
				}
				var defaultCursorField []string = nil
				for _, defaultCursorFieldItem := range streamsItem.Stream.DefaultCursorField {
					defaultCursorField = append(defaultCursorField, defaultCursorFieldItem.ValueString())
				}
				var sourceDefinedPrimaryKey [][]string = nil
				for _, sourceDefinedPrimaryKeyItem := range streamsItem.Stream.SourceDefinedPrimaryKey {
					var sourceDefinedPrimaryKeyTmp []string = nil
					for _, item := range sourceDefinedPrimaryKeyItem {
						sourceDefinedPrimaryKeyTmp = append(sourceDefinedPrimaryKeyTmp, item.ValueString())
					}
					sourceDefinedPrimaryKey = append(sourceDefinedPrimaryKey, sourceDefinedPrimaryKeyTmp)
				}
				namespace := new(string)
				if !streamsItem.Stream.Namespace.IsUnknown() && !streamsItem.Stream.Namespace.IsNull() {
					*namespace = streamsItem.Stream.Namespace.ValueString()
				} else {
					namespace = nil
				}
				stream = &shared.AirbyteStream{
					Name:                    name1,
					JSONSchema:              jsonSchema,
					SupportedSyncModes:      supportedSyncModes,
					SourceDefinedCursor:     sourceDefinedCursor,
					DefaultCursorField:      defaultCursorField,
					SourceDefinedPrimaryKey: sourceDefinedPrimaryKey,
					Namespace:               namespace,
				}
			}
			var config *shared.AirbyteStreamConfiguration
			if streamsItem.Config != nil {
				syncMode := shared.SyncMode(streamsItem.Config.SyncMode.ValueString())
				var cursorField []string = nil
				for _, cursorFieldItem := range streamsItem.Config.CursorField {
					cursorField = append(cursorField, cursorFieldItem.ValueString())
				}
				destinationSyncMode := shared.DestinationSyncMode(streamsItem.Config.DestinationSyncMode.ValueString())
				var primaryKey [][]string = nil
				for _, primaryKeyItem := range streamsItem.Config.PrimaryKey {
					var primaryKeyTmp []string = nil
					for _, item1 := range primaryKeyItem {
						primaryKeyTmp = append(primaryKeyTmp, item1.ValueString())
					}
					primaryKey = append(primaryKey, primaryKeyTmp)
				}
				aliasName := new(string)
				if !streamsItem.Config.AliasName.IsUnknown() && !streamsItem.Config.AliasName.IsNull() {
					*aliasName = streamsItem.Config.AliasName.ValueString()
				} else {
					aliasName = nil
				}
				selected := new(bool)
				if !streamsItem.Config.Selected.IsUnknown() && !streamsItem.Config.Selected.IsNull() {
					*selected = streamsItem.Config.Selected.ValueBool()
				} else {
					selected = nil
				}
				suggested := new(bool)
				if !streamsItem.Config.Suggested.IsUnknown() && !streamsItem.Config.Suggested.IsNull() {
					*suggested = streamsItem.Config.Suggested.ValueBool()
				} else {
					suggested = nil
				}
				fieldSelectionEnabled := new(bool)
				if !streamsItem.Config.FieldSelectionEnabled.IsUnknown() && !streamsItem.Config.FieldSelectionEnabled.IsNull() {
					*fieldSelectionEnabled = streamsItem.Config.FieldSelectionEnabled.ValueBool()
				} else {
					fieldSelectionEnabled = nil
				}
				var selectedFields []shared.SelectedFieldInfo = nil
				for _, selectedFieldsItem := range streamsItem.Config.SelectedFields {
					var fieldPath []string = nil
					for _, fieldPathItem := range selectedFieldsItem.FieldPath {
						fieldPath = append(fieldPath, fieldPathItem.ValueString())
					}
					selectedFields = append(selectedFields, shared.SelectedFieldInfo{
						FieldPath: fieldPath,
					})
				}
				config = &shared.AirbyteStreamConfiguration{
					SyncMode:              syncMode,
					CursorField:           cursorField,
					DestinationSyncMode:   destinationSyncMode,
					PrimaryKey:            primaryKey,
					AliasName:             aliasName,
					Selected:              selected,
					Suggested:             suggested,
					FieldSelectionEnabled: fieldSelectionEnabled,
					SelectedFields:        selectedFields,
				}
			}
			streams = append(streams, shared.AirbyteStreamAndConfiguration{
				Stream: stream,
				Config: config,
			})
		}
		syncCatalog = &shared.AirbyteCatalog{
			Streams: streams,
		}
	}
	var schedule *shared.ConnectionSchedule
	if r.Schedule != nil {
		units := r.Schedule.Units.ValueInt64()
		timeUnit := shared.TimeUnit(r.Schedule.TimeUnit.ValueString())
		schedule = &shared.ConnectionSchedule{
			Units:    units,
			TimeUnit: timeUnit,
		}
	}
	scheduleType := new(shared.ConnectionScheduleType)
	if !r.ScheduleType.IsUnknown() && !r.ScheduleType.IsNull() {
		*scheduleType = shared.ConnectionScheduleType(r.ScheduleType.ValueString())
	} else {
		scheduleType = nil
	}
	var scheduleData *shared.ConnectionScheduleData
	if r.ScheduleData != nil {
		var basicSchedule *shared.BasicSchedule
		if r.ScheduleData.BasicSchedule != nil {
			timeUnit1 := shared.ConnectionScheduleDataTimeUnit(r.ScheduleData.BasicSchedule.TimeUnit.ValueString())
			units1 := r.ScheduleData.BasicSchedule.Units.ValueInt64()
			basicSchedule = &shared.BasicSchedule{
				TimeUnit: timeUnit1,
				Units:    units1,
			}
		}
		var cron *shared.Cron
		if r.ScheduleData.Cron != nil {
			cronExpression := r.ScheduleData.Cron.CronExpression.ValueString()
			cronTimeZone := r.ScheduleData.Cron.CronTimeZone.ValueString()
			cron = &shared.Cron{
				CronExpression: cronExpression,
				CronTimeZone:   cronTimeZone,
			}
		}
		scheduleData = &shared.ConnectionScheduleData{
			BasicSchedule: basicSchedule,
			Cron:          cron,
		}
	}
	status := shared.ConnectionStatus(r.Status.ValueString())
	var resourceRequirements *shared.ResourceRequirements
	if r.ResourceRequirements != nil {
		cpuRequest := new(string)
		if !r.ResourceRequirements.CPURequest.IsUnknown() && !r.ResourceRequirements.CPURequest.IsNull() {
			*cpuRequest = r.ResourceRequirements.CPURequest.ValueString()
		} else {
			cpuRequest = nil
		}
		cpuLimit := new(string)
		if !r.ResourceRequirements.CPULimit.IsUnknown() && !r.ResourceRequirements.CPULimit.IsNull() {
			*cpuLimit = r.ResourceRequirements.CPULimit.ValueString()
		} else {
			cpuLimit = nil
		}
		memoryRequest := new(string)
		if !r.ResourceRequirements.MemoryRequest.IsUnknown() && !r.ResourceRequirements.MemoryRequest.IsNull() {
			*memoryRequest = r.ResourceRequirements.MemoryRequest.ValueString()
		} else {
			memoryRequest = nil
		}
		memoryLimit := new(string)
		if !r.ResourceRequirements.MemoryLimit.IsUnknown() && !r.ResourceRequirements.MemoryLimit.IsNull() {
			*memoryLimit = r.ResourceRequirements.MemoryLimit.ValueString()
		} else {
			memoryLimit = nil
		}
		resourceRequirements = &shared.ResourceRequirements{
			CPURequest:    cpuRequest,
			CPULimit:      cpuLimit,
			MemoryRequest: memoryRequest,
			MemoryLimit:   memoryLimit,
		}
	}
	sourceCatalogID := new(string)
	if !r.SourceCatalogID.IsUnknown() && !r.SourceCatalogID.IsNull() {
		*sourceCatalogID = r.SourceCatalogID.ValueString()
	} else {
		sourceCatalogID = nil
	}
	geography := new(shared.Geography)
	if !r.Geography.IsUnknown() && !r.Geography.IsNull() {
		*geography = shared.Geography(r.Geography.ValueString())
	} else {
		geography = nil
	}
	notifySchemaChanges := new(bool)
	if !r.NotifySchemaChanges.IsUnknown() && !r.NotifySchemaChanges.IsNull() {
		*notifySchemaChanges = r.NotifySchemaChanges.ValueBool()
	} else {
		notifySchemaChanges = nil
	}
	notifySchemaChangesByEmail := new(bool)
	if !r.NotifySchemaChangesByEmail.IsUnknown() && !r.NotifySchemaChangesByEmail.IsNull() {
		*notifySchemaChangesByEmail = r.NotifySchemaChangesByEmail.ValueBool()
	} else {
		notifySchemaChangesByEmail = nil
	}
	nonBreakingChangesPreference := new(shared.NonBreakingChangesPreference)
	if !r.NonBreakingChangesPreference.IsUnknown() && !r.NonBreakingChangesPreference.IsNull() {
		*nonBreakingChangesPreference = shared.NonBreakingChangesPreference(r.NonBreakingChangesPreference.ValueString())
	} else {
		nonBreakingChangesPreference = nil
	}
	out := shared.ConnectionCreate{
		Name:                         name,
		NamespaceDefinition:          namespaceDefinition,
		NamespaceFormat:              namespaceFormat,
		Prefix:                       prefix,
		SourceID:                     sourceID,
		DestinationID:                destinationID,
		OperationIds:                 operationIds,
		SyncCatalog:                  syncCatalog,
		Schedule:                     schedule,
		ScheduleType:                 scheduleType,
		ScheduleData:                 scheduleData,
		Status:                       status,
		ResourceRequirements:         resourceRequirements,
		SourceCatalogID:              sourceCatalogID,
		Geography:                    geography,
		NotifySchemaChanges:          notifySchemaChanges,
		NotifySchemaChangesByEmail:   notifySchemaChangesByEmail,
		NonBreakingChangesPreference: nonBreakingChangesPreference,
	}
	return &out
}

func (r *ConnectionResourceModel) ToUpdateSDKType() *shared.ConnectionUpdate {
	connectionID := r.ConnectionID.ValueString()
	namespaceDefinition := new(shared.NamespaceDefinitionType)
	if !r.NamespaceDefinition.IsUnknown() && !r.NamespaceDefinition.IsNull() {
		*namespaceDefinition = shared.NamespaceDefinitionType(r.NamespaceDefinition.ValueString())
	} else {
		namespaceDefinition = nil
	}
	namespaceFormat := new(string)
	if !r.NamespaceFormat.IsUnknown() && !r.NamespaceFormat.IsNull() {
		*namespaceFormat = r.NamespaceFormat.ValueString()
	} else {
		namespaceFormat = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	prefix := new(string)
	if !r.Prefix.IsUnknown() && !r.Prefix.IsNull() {
		*prefix = r.Prefix.ValueString()
	} else {
		prefix = nil
	}
	var operationIds []string = nil
	for _, operationIdsItem := range r.OperationIds {
		operationIds = append(operationIds, operationIdsItem.ValueString())
	}
	var syncCatalog *shared.AirbyteCatalog
	if r.SyncCatalog != nil {
		var streams []shared.AirbyteStreamAndConfiguration = nil
		for _, streamsItem := range r.SyncCatalog.Streams {
			var stream *shared.AirbyteStream
			if streamsItem.Stream != nil {
				name1 := streamsItem.Stream.Name.ValueString()
				var jsonSchema *shared.StreamJSONSchema
				if streamsItem.Stream.JSONSchema != nil {
					jsonSchema = &shared.StreamJSONSchema{}
				}
				var supportedSyncModes []shared.SyncMode = nil
				for _, supportedSyncModesItem := range streamsItem.Stream.SupportedSyncModes {
					supportedSyncModes = append(supportedSyncModes, shared.SyncMode(supportedSyncModesItem.ValueString()))
				}
				sourceDefinedCursor := new(bool)
				if !streamsItem.Stream.SourceDefinedCursor.IsUnknown() && !streamsItem.Stream.SourceDefinedCursor.IsNull() {
					*sourceDefinedCursor = streamsItem.Stream.SourceDefinedCursor.ValueBool()
				} else {
					sourceDefinedCursor = nil
				}
				var defaultCursorField []string = nil
				for _, defaultCursorFieldItem := range streamsItem.Stream.DefaultCursorField {
					defaultCursorField = append(defaultCursorField, defaultCursorFieldItem.ValueString())
				}
				var sourceDefinedPrimaryKey [][]string = nil
				for _, sourceDefinedPrimaryKeyItem := range streamsItem.Stream.SourceDefinedPrimaryKey {
					var sourceDefinedPrimaryKeyTmp []string = nil
					for _, item := range sourceDefinedPrimaryKeyItem {
						sourceDefinedPrimaryKeyTmp = append(sourceDefinedPrimaryKeyTmp, item.ValueString())
					}
					sourceDefinedPrimaryKey = append(sourceDefinedPrimaryKey, sourceDefinedPrimaryKeyTmp)
				}
				namespace := new(string)
				if !streamsItem.Stream.Namespace.IsUnknown() && !streamsItem.Stream.Namespace.IsNull() {
					*namespace = streamsItem.Stream.Namespace.ValueString()
				} else {
					namespace = nil
				}
				stream = &shared.AirbyteStream{
					Name:                    name1,
					JSONSchema:              jsonSchema,
					SupportedSyncModes:      supportedSyncModes,
					SourceDefinedCursor:     sourceDefinedCursor,
					DefaultCursorField:      defaultCursorField,
					SourceDefinedPrimaryKey: sourceDefinedPrimaryKey,
					Namespace:               namespace,
				}
			}
			var config *shared.AirbyteStreamConfiguration
			if streamsItem.Config != nil {
				syncMode := shared.SyncMode(streamsItem.Config.SyncMode.ValueString())
				var cursorField []string = nil
				for _, cursorFieldItem := range streamsItem.Config.CursorField {
					cursorField = append(cursorField, cursorFieldItem.ValueString())
				}
				destinationSyncMode := shared.DestinationSyncMode(streamsItem.Config.DestinationSyncMode.ValueString())
				var primaryKey [][]string = nil
				for _, primaryKeyItem := range streamsItem.Config.PrimaryKey {
					var primaryKeyTmp []string = nil
					for _, item1 := range primaryKeyItem {
						primaryKeyTmp = append(primaryKeyTmp, item1.ValueString())
					}
					primaryKey = append(primaryKey, primaryKeyTmp)
				}
				aliasName := new(string)
				if !streamsItem.Config.AliasName.IsUnknown() && !streamsItem.Config.AliasName.IsNull() {
					*aliasName = streamsItem.Config.AliasName.ValueString()
				} else {
					aliasName = nil
				}
				selected := new(bool)
				if !streamsItem.Config.Selected.IsUnknown() && !streamsItem.Config.Selected.IsNull() {
					*selected = streamsItem.Config.Selected.ValueBool()
				} else {
					selected = nil
				}
				suggested := new(bool)
				if !streamsItem.Config.Suggested.IsUnknown() && !streamsItem.Config.Suggested.IsNull() {
					*suggested = streamsItem.Config.Suggested.ValueBool()
				} else {
					suggested = nil
				}
				fieldSelectionEnabled := new(bool)
				if !streamsItem.Config.FieldSelectionEnabled.IsUnknown() && !streamsItem.Config.FieldSelectionEnabled.IsNull() {
					*fieldSelectionEnabled = streamsItem.Config.FieldSelectionEnabled.ValueBool()
				} else {
					fieldSelectionEnabled = nil
				}
				var selectedFields []shared.SelectedFieldInfo = nil
				for _, selectedFieldsItem := range streamsItem.Config.SelectedFields {
					var fieldPath []string = nil
					for _, fieldPathItem := range selectedFieldsItem.FieldPath {
						fieldPath = append(fieldPath, fieldPathItem.ValueString())
					}
					selectedFields = append(selectedFields, shared.SelectedFieldInfo{
						FieldPath: fieldPath,
					})
				}
				config = &shared.AirbyteStreamConfiguration{
					SyncMode:              syncMode,
					CursorField:           cursorField,
					DestinationSyncMode:   destinationSyncMode,
					PrimaryKey:            primaryKey,
					AliasName:             aliasName,
					Selected:              selected,
					Suggested:             suggested,
					FieldSelectionEnabled: fieldSelectionEnabled,
					SelectedFields:        selectedFields,
				}
			}
			streams = append(streams, shared.AirbyteStreamAndConfiguration{
				Stream: stream,
				Config: config,
			})
		}
		syncCatalog = &shared.AirbyteCatalog{
			Streams: streams,
		}
	}
	var schedule *shared.ConnectionSchedule
	if r.Schedule != nil {
		units := r.Schedule.Units.ValueInt64()
		timeUnit := shared.TimeUnit(r.Schedule.TimeUnit.ValueString())
		schedule = &shared.ConnectionSchedule{
			Units:    units,
			TimeUnit: timeUnit,
		}
	}
	scheduleType := new(shared.ConnectionScheduleType)
	if !r.ScheduleType.IsUnknown() && !r.ScheduleType.IsNull() {
		*scheduleType = shared.ConnectionScheduleType(r.ScheduleType.ValueString())
	} else {
		scheduleType = nil
	}
	var scheduleData *shared.ConnectionScheduleData
	if r.ScheduleData != nil {
		var basicSchedule *shared.BasicSchedule
		if r.ScheduleData.BasicSchedule != nil {
			timeUnit1 := shared.ConnectionScheduleDataTimeUnit(r.ScheduleData.BasicSchedule.TimeUnit.ValueString())
			units1 := r.ScheduleData.BasicSchedule.Units.ValueInt64()
			basicSchedule = &shared.BasicSchedule{
				TimeUnit: timeUnit1,
				Units:    units1,
			}
		}
		var cron *shared.Cron
		if r.ScheduleData.Cron != nil {
			cronExpression := r.ScheduleData.Cron.CronExpression.ValueString()
			cronTimeZone := r.ScheduleData.Cron.CronTimeZone.ValueString()
			cron = &shared.Cron{
				CronExpression: cronExpression,
				CronTimeZone:   cronTimeZone,
			}
		}
		scheduleData = &shared.ConnectionScheduleData{
			BasicSchedule: basicSchedule,
			Cron:          cron,
		}
	}
	status := new(shared.ConnectionStatus)
	if !r.Status.IsUnknown() && !r.Status.IsNull() {
		*status = shared.ConnectionStatus(r.Status.ValueString())
	} else {
		status = nil
	}
	var resourceRequirements *shared.ResourceRequirements
	if r.ResourceRequirements != nil {
		cpuRequest := new(string)
		if !r.ResourceRequirements.CPURequest.IsUnknown() && !r.ResourceRequirements.CPURequest.IsNull() {
			*cpuRequest = r.ResourceRequirements.CPURequest.ValueString()
		} else {
			cpuRequest = nil
		}
		cpuLimit := new(string)
		if !r.ResourceRequirements.CPULimit.IsUnknown() && !r.ResourceRequirements.CPULimit.IsNull() {
			*cpuLimit = r.ResourceRequirements.CPULimit.ValueString()
		} else {
			cpuLimit = nil
		}
		memoryRequest := new(string)
		if !r.ResourceRequirements.MemoryRequest.IsUnknown() && !r.ResourceRequirements.MemoryRequest.IsNull() {
			*memoryRequest = r.ResourceRequirements.MemoryRequest.ValueString()
		} else {
			memoryRequest = nil
		}
		memoryLimit := new(string)
		if !r.ResourceRequirements.MemoryLimit.IsUnknown() && !r.ResourceRequirements.MemoryLimit.IsNull() {
			*memoryLimit = r.ResourceRequirements.MemoryLimit.ValueString()
		} else {
			memoryLimit = nil
		}
		resourceRequirements = &shared.ResourceRequirements{
			CPURequest:    cpuRequest,
			CPULimit:      cpuLimit,
			MemoryRequest: memoryRequest,
			MemoryLimit:   memoryLimit,
		}
	}
	sourceCatalogID := new(string)
	if !r.SourceCatalogID.IsUnknown() && !r.SourceCatalogID.IsNull() {
		*sourceCatalogID = r.SourceCatalogID.ValueString()
	} else {
		sourceCatalogID = nil
	}
	geography := new(shared.Geography)
	if !r.Geography.IsUnknown() && !r.Geography.IsNull() {
		*geography = shared.Geography(r.Geography.ValueString())
	} else {
		geography = nil
	}
	notifySchemaChanges := new(bool)
	if !r.NotifySchemaChanges.IsUnknown() && !r.NotifySchemaChanges.IsNull() {
		*notifySchemaChanges = r.NotifySchemaChanges.ValueBool()
	} else {
		notifySchemaChanges = nil
	}
	notifySchemaChangesByEmail := new(bool)
	if !r.NotifySchemaChangesByEmail.IsUnknown() && !r.NotifySchemaChangesByEmail.IsNull() {
		*notifySchemaChangesByEmail = r.NotifySchemaChangesByEmail.ValueBool()
	} else {
		notifySchemaChangesByEmail = nil
	}
	nonBreakingChangesPreference := new(shared.NonBreakingChangesPreference)
	if !r.NonBreakingChangesPreference.IsUnknown() && !r.NonBreakingChangesPreference.IsNull() {
		*nonBreakingChangesPreference = shared.NonBreakingChangesPreference(r.NonBreakingChangesPreference.ValueString())
	} else {
		nonBreakingChangesPreference = nil
	}
	breakingChange := new(bool)
	if !r.BreakingChange.IsUnknown() && !r.BreakingChange.IsNull() {
		*breakingChange = r.BreakingChange.ValueBool()
	} else {
		breakingChange = nil
	}
	out := shared.ConnectionUpdate{
		ConnectionID:                 connectionID,
		NamespaceDefinition:          namespaceDefinition,
		NamespaceFormat:              namespaceFormat,
		Name:                         name,
		Prefix:                       prefix,
		OperationIds:                 operationIds,
		SyncCatalog:                  syncCatalog,
		Schedule:                     schedule,
		ScheduleType:                 scheduleType,
		ScheduleData:                 scheduleData,
		Status:                       status,
		ResourceRequirements:         resourceRequirements,
		SourceCatalogID:              sourceCatalogID,
		Geography:                    geography,
		NotifySchemaChanges:          notifySchemaChanges,
		NotifySchemaChangesByEmail:   notifySchemaChangesByEmail,
		NonBreakingChangesPreference: nonBreakingChangesPreference,
		BreakingChange:               breakingChange,
	}
	return &out
}

func (r *ConnectionResourceModel) ToDeleteSDKType() *shared.ConnectionCreate {
	out := r.ToCreateSDKType()
	return out
}

func (r *ConnectionResourceModel) RefreshFromCreateResponse(resp *shared.ConnectionRead) {
	r.BreakingChange = types.BoolValue(resp.BreakingChange)
	r.ConnectionID = types.StringValue(resp.ConnectionID)
	r.DestinationID = types.StringValue(resp.DestinationID)
	if resp.Geography != nil {
		r.Geography = types.StringValue(string(*resp.Geography))
	} else {
		r.Geography = types.StringNull()
	}
	r.Name = types.StringValue(resp.Name)
	if resp.NamespaceDefinition != nil {
		r.NamespaceDefinition = types.StringValue(string(*resp.NamespaceDefinition))
	} else {
		r.NamespaceDefinition = types.StringNull()
	}
	if resp.NamespaceFormat != nil {
		r.NamespaceFormat = types.StringValue(*resp.NamespaceFormat)
	} else {
		r.NamespaceFormat = types.StringNull()
	}
	if resp.NonBreakingChangesPreference != nil {
		r.NonBreakingChangesPreference = types.StringValue(string(*resp.NonBreakingChangesPreference))
	} else {
		r.NonBreakingChangesPreference = types.StringNull()
	}
	if resp.NotifySchemaChanges != nil {
		r.NotifySchemaChanges = types.BoolValue(*resp.NotifySchemaChanges)
	} else {
		r.NotifySchemaChanges = types.BoolNull()
	}
	if resp.NotifySchemaChangesByEmail != nil {
		r.NotifySchemaChangesByEmail = types.BoolValue(*resp.NotifySchemaChangesByEmail)
	} else {
		r.NotifySchemaChangesByEmail = types.BoolNull()
	}
	r.OperationIds = nil
	for _, v := range resp.OperationIds {
		r.OperationIds = append(r.OperationIds, types.StringValue(v))
	}
	if resp.Prefix != nil {
		r.Prefix = types.StringValue(*resp.Prefix)
	} else {
		r.Prefix = types.StringNull()
	}
	if resp.ResourceRequirements == nil {
		r.ResourceRequirements = nil
	} else {
		r.ResourceRequirements = &ResourceRequirements{}
		if resp.ResourceRequirements.CPULimit != nil {
			r.ResourceRequirements.CPULimit = types.StringValue(*resp.ResourceRequirements.CPULimit)
		} else {
			r.ResourceRequirements.CPULimit = types.StringNull()
		}
		if resp.ResourceRequirements.CPURequest != nil {
			r.ResourceRequirements.CPURequest = types.StringValue(*resp.ResourceRequirements.CPURequest)
		} else {
			r.ResourceRequirements.CPURequest = types.StringNull()
		}
		if resp.ResourceRequirements.MemoryLimit != nil {
			r.ResourceRequirements.MemoryLimit = types.StringValue(*resp.ResourceRequirements.MemoryLimit)
		} else {
			r.ResourceRequirements.MemoryLimit = types.StringNull()
		}
		if resp.ResourceRequirements.MemoryRequest != nil {
			r.ResourceRequirements.MemoryRequest = types.StringValue(*resp.ResourceRequirements.MemoryRequest)
		} else {
			r.ResourceRequirements.MemoryRequest = types.StringNull()
		}
	}
	if resp.Schedule == nil {
		r.Schedule = nil
	} else {
		r.Schedule = &ConnectionSchedule{}
		r.Schedule.TimeUnit = types.StringValue(string(resp.Schedule.TimeUnit))
		r.Schedule.Units = types.Int64Value(resp.Schedule.Units)
	}
	if resp.ScheduleData == nil {
		r.ScheduleData = nil
	} else {
		r.ScheduleData = &ConnectionScheduleData{}
		if resp.ScheduleData.BasicSchedule == nil {
			r.ScheduleData.BasicSchedule = nil
		} else {
			r.ScheduleData.BasicSchedule = &ConnectionSchedule{}
			r.ScheduleData.BasicSchedule.TimeUnit = types.StringValue(string(resp.ScheduleData.BasicSchedule.TimeUnit))
			r.ScheduleData.BasicSchedule.Units = types.Int64Value(resp.ScheduleData.BasicSchedule.Units)
		}
		if resp.ScheduleData.Cron == nil {
			r.ScheduleData.Cron = nil
		} else {
			r.ScheduleData.Cron = &Cron{}
			r.ScheduleData.Cron.CronExpression = types.StringValue(resp.ScheduleData.Cron.CronExpression)
			r.ScheduleData.Cron.CronTimeZone = types.StringValue(resp.ScheduleData.Cron.CronTimeZone)
		}
	}
	if resp.ScheduleType != nil {
		r.ScheduleType = types.StringValue(string(*resp.ScheduleType))
	} else {
		r.ScheduleType = types.StringNull()
	}
	if resp.SourceCatalogID != nil {
		r.SourceCatalogID = types.StringValue(*resp.SourceCatalogID)
	} else {
		r.SourceCatalogID = types.StringNull()
	}
	r.SourceID = types.StringValue(resp.SourceID)
	r.Status = types.StringValue(string(resp.Status))
	if r.SyncCatalog == nil {
		r.SyncCatalog = &AirbyteCatalog{}
	}
	if len(r.SyncCatalog.Streams) > len(resp.SyncCatalog.Streams) {
		r.SyncCatalog.Streams = r.SyncCatalog.Streams[:len(resp.SyncCatalog.Streams)]
	}
	for streamsCount, streamsItem := range resp.SyncCatalog.Streams {
		var streams1 AirbyteStreamAndConfiguration
		if streamsItem.Config == nil {
			streams1.Config = nil
		} else {
			streams1.Config = &AirbyteStreamConfiguration{}
			if streamsItem.Config.AliasName != nil {
				streams1.Config.AliasName = types.StringValue(*streamsItem.Config.AliasName)
			} else {
				streams1.Config.AliasName = types.StringNull()
			}
			streams1.Config.CursorField = nil
			for _, v := range streamsItem.Config.CursorField {
				streams1.Config.CursorField = append(streams1.Config.CursorField, types.StringValue(v))
			}
			streams1.Config.DestinationSyncMode = types.StringValue(string(streamsItem.Config.DestinationSyncMode))
			if streamsItem.Config.FieldSelectionEnabled != nil {
				streams1.Config.FieldSelectionEnabled = types.BoolValue(*streamsItem.Config.FieldSelectionEnabled)
			} else {
				streams1.Config.FieldSelectionEnabled = types.BoolNull()
			}
			streams1.Config.PrimaryKey = nil
			for _, primaryKeyItem := range streamsItem.Config.PrimaryKey {
				var primaryKey1 []types.String
				primaryKey1 = nil
				for _, v := range primaryKeyItem {
					primaryKey1 = append(primaryKey1, types.StringValue(v))
				}
				streams1.Config.PrimaryKey = append(streams1.Config.PrimaryKey, primaryKey1)
			}
			if streamsItem.Config.Selected != nil {
				streams1.Config.Selected = types.BoolValue(*streamsItem.Config.Selected)
			} else {
				streams1.Config.Selected = types.BoolNull()
			}
			if len(streams1.Config.SelectedFields) > len(streamsItem.Config.SelectedFields) {
				streams1.Config.SelectedFields = streams1.Config.SelectedFields[:len(streamsItem.Config.SelectedFields)]
			}
			for selectedFieldsCount, selectedFieldsItem := range streamsItem.Config.SelectedFields {
				var selectedFields1 SelectedFieldInfo
				selectedFields1.FieldPath = nil
				for _, v := range selectedFieldsItem.FieldPath {
					selectedFields1.FieldPath = append(selectedFields1.FieldPath, types.StringValue(v))
				}
				if selectedFieldsCount+1 > len(streams1.Config.SelectedFields) {
					streams1.Config.SelectedFields = append(streams1.Config.SelectedFields, selectedFields1)
				} else {
					streams1.Config.SelectedFields[selectedFieldsCount].FieldPath = selectedFields1.FieldPath
				}
			}
			if streamsItem.Config.Suggested != nil {
				streams1.Config.Suggested = types.BoolValue(*streamsItem.Config.Suggested)
			} else {
				streams1.Config.Suggested = types.BoolNull()
			}
			streams1.Config.SyncMode = types.StringValue(string(streamsItem.Config.SyncMode))
		}
		if streamsItem.Stream == nil {
			streams1.Stream = nil
		} else {
			streams1.Stream = &AirbyteStream{}
			streams1.Stream.DefaultCursorField = nil
			for _, v := range streamsItem.Stream.DefaultCursorField {
				streams1.Stream.DefaultCursorField = append(streams1.Stream.DefaultCursorField, types.StringValue(v))
			}
			if streamsItem.Stream.JSONSchema == nil {
				streams1.Stream.JSONSchema = nil
			} else {
				streams1.Stream.JSONSchema = &StreamJSONSchema{}
			}
			streams1.Stream.Name = types.StringValue(streamsItem.Stream.Name)
			if streamsItem.Stream.Namespace != nil {
				streams1.Stream.Namespace = types.StringValue(*streamsItem.Stream.Namespace)
			} else {
				streams1.Stream.Namespace = types.StringNull()
			}
			if streamsItem.Stream.SourceDefinedCursor != nil {
				streams1.Stream.SourceDefinedCursor = types.BoolValue(*streamsItem.Stream.SourceDefinedCursor)
			} else {
				streams1.Stream.SourceDefinedCursor = types.BoolNull()
			}
			streams1.Stream.SourceDefinedPrimaryKey = nil
			for _, sourceDefinedPrimaryKeyItem := range streamsItem.Stream.SourceDefinedPrimaryKey {
				var sourceDefinedPrimaryKey1 []types.String
				sourceDefinedPrimaryKey1 = nil
				for _, v := range sourceDefinedPrimaryKeyItem {
					sourceDefinedPrimaryKey1 = append(sourceDefinedPrimaryKey1, types.StringValue(v))
				}
				streams1.Stream.SourceDefinedPrimaryKey = append(streams1.Stream.SourceDefinedPrimaryKey, sourceDefinedPrimaryKey1)
			}
			streams1.Stream.SupportedSyncModes = nil
			for _, v := range streamsItem.Stream.SupportedSyncModes {
				streams1.Stream.SupportedSyncModes = append(streams1.Stream.SupportedSyncModes, types.StringValue(string(v)))
			}
		}
		if streamsCount+1 > len(r.SyncCatalog.Streams) {
			r.SyncCatalog.Streams = append(r.SyncCatalog.Streams, streams1)
		} else {
			r.SyncCatalog.Streams[streamsCount].Config = streams1.Config
			r.SyncCatalog.Streams[streamsCount].Stream = streams1.Stream
		}
	}
	if resp.WorkspaceID != nil {
		r.WorkspaceID = types.StringValue(*resp.WorkspaceID)
	} else {
		r.WorkspaceID = types.StringNull()
	}
}

func (r *ConnectionResourceModel) RefreshFromUpdateResponse(resp *shared.ConnectionRead) {
	r.RefreshFromCreateResponse(resp)
}
