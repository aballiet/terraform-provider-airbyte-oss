// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/aballiet/terraform-provider-airbyte/internal/sdk"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &SourceSchemaDataSource{}
var _ datasource.DataSourceWithConfigure = &SourceSchemaDataSource{}

func NewSourceSchemaDataSource() datasource.DataSource {
	return &SourceSchemaDataSource{}
}

// SourceSchemaDataSource is the data source implementation.
type SourceSchemaDataSource struct {
	client *sdk.SDK
}

// SourceSchemaDataSourceModel describes the data model.
type SourceSchemaDataSourceModel struct {
	BreakingChange     types.Bool         `tfsdk:"breaking_change"`
	Catalog            *AirbyteCatalog    `tfsdk:"catalog"`
	CatalogDiff        *CatalogDiff       `tfsdk:"catalog_diff"`
	CatalogID          types.String       `tfsdk:"catalog_id"`
	ConnectionID       types.String       `tfsdk:"connection_id"`
	ConnectionStatus   types.String       `tfsdk:"connection_status"`
	DisableCache       types.Bool         `tfsdk:"disable_cache"`
	JobInfo            SynchronousJobRead `tfsdk:"job_info"`
	NotifySchemaChange types.Bool         `tfsdk:"notify_schema_change"`
	SourceID           types.String       `tfsdk:"source_id"`
}

// Metadata returns the data source type name.
func (r *SourceSchemaDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_source_schema"
}

// Schema defines the schema for the data source.
func (r *SourceSchemaDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "SourceSchema DataSource",

		Attributes: map[string]schema.Attribute{
			"breaking_change": schema.BoolAttribute{
				Computed: true,
			},
			"catalog": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"streams": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"stream": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"name": schema.StringAttribute{
											Computed:    true,
											Description: `Stream's name.`,
										},
										"json_schema": schema.MapAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `Stream schema using Json Schema specs.`,
										},
										"supported_sync_modes": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
										},
										"source_defined_cursor": schema.BoolAttribute{
											Computed:    true,
											Description: `If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.`,
										},
										"default_cursor_field": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.`,
										},
										"source_defined_primary_key": schema.ListAttribute{
											Computed: true,
											ElementType: types.ListType{
												ElemType: types.StringType,
											},
											Description: `If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.`,
										},
										"namespace": schema.StringAttribute{
											Computed:    true,
											Description: `Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.`,
										},
									},
									Description: `the immutable schema defined by the source`,
								},
								"config": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"sync_mode": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["full_refresh", "incremental"]`,
										},
										"cursor_field": schema.ListAttribute{
											Computed:    true,
											ElementType: types.StringType,
											Description: `Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if ` + "`" + `sync_mode` + "`" + ` is ` + "`" + `incremental` + "`" + `. Otherwise it is ignored.`,
										},
										"destination_sync_mode": schema.StringAttribute{
											Computed:    true,
											Description: `must be one of ["append", "overwrite", "append_dedup"]`,
										},
										"primary_key": schema.ListAttribute{
											Computed: true,
											ElementType: types.ListType{
												ElemType: types.StringType,
											},
											Description: `Paths to the fields that will be used as primary key. This field is REQUIRED if ` + "`" + `destination_sync_mode` + "`" + ` is ` + "`" + `*_dedup` + "`" + `. Otherwise it is ignored.`,
										},
										"alias_name": schema.StringAttribute{
											Computed:    true,
											Description: `Alias name to the stream to be used in the destination`,
										},
										"selected": schema.BoolAttribute{
											Computed:    true,
											Description: `If this is true, the stream is selected with all of its properties. For new connections, this considers if the stream is suggested or not`,
										},
										"suggested": schema.BoolAttribute{
											Computed:    true,
											Description: `Does the connector suggest that this stream be enabled by default?`,
										},
										"field_selection_enabled": schema.BoolAttribute{
											Computed:    true,
											Description: `Whether field selection should be enabled. If this is true, only the properties in ` + "`" + `selectedFields` + "`" + ` will be included.`,
										},
										"selected_fields": schema.ListNestedAttribute{
											Computed: true,
											NestedObject: schema.NestedAttributeObject{
												Attributes: map[string]schema.Attribute{
													"field_path": schema.ListAttribute{
														Computed:    true,
														ElementType: types.StringType,
													},
												},
											},
											Description: `Paths to the fields that will be included in the configured catalog. This must be set if ` + "`" + `fieldSelectedEnabled` + "`" + ` is set. An empty list indicates that no properties will be included.`,
										},
									},
									Description: `the mutable part of the stream to configure the destination`,
								},
							},
						},
					},
				},
				Description: `describes the available schema (catalog).`,
			},
			"catalog_diff": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"transforms": schema.ListNestedAttribute{
						Computed: true,
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"transform_type": schema.StringAttribute{
									Computed:    true,
									Description: `must be one of ["add_stream", "remove_stream", "update_stream"]`,
								},
								"stream_descriptor": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"name": schema.StringAttribute{
											Computed: true,
										},
										"namespace": schema.StringAttribute{
											Computed: true,
										},
									},
								},
								"update_stream": schema.ListNestedAttribute{
									Computed: true,
									NestedObject: schema.NestedAttributeObject{
										Attributes: map[string]schema.Attribute{
											"transform_type": schema.StringAttribute{
												Computed:    true,
												Description: `must be one of ["add_field", "remove_field", "update_field_schema"]`,
											},
											"field_name": schema.ListAttribute{
												Computed:    true,
												ElementType: types.StringType,
												Description: `A field name is a list of strings that form the path to the field.`,
											},
											"breaking": schema.BoolAttribute{
												Computed: true,
											},
											"add_field": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"schema": schema.SingleNestedAttribute{
														Computed:    true,
														Attributes:  map[string]schema.Attribute{},
														Description: `JSONSchema representation of the field`,
													},
												},
											},
											"remove_field": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"schema": schema.SingleNestedAttribute{
														Computed:    true,
														Attributes:  map[string]schema.Attribute{},
														Description: `JSONSchema representation of the field`,
													},
												},
											},
											"update_field_schema": schema.SingleNestedAttribute{
												Computed: true,
												Attributes: map[string]schema.Attribute{
													"old_schema": schema.SingleNestedAttribute{
														Computed:    true,
														Attributes:  map[string]schema.Attribute{},
														Description: `JSONSchema representation of the field`,
													},
													"new_schema": schema.SingleNestedAttribute{
														Computed:    true,
														Attributes:  map[string]schema.Attribute{},
														Description: `JSONSchema representation of the field`,
													},
												},
											},
										},
									},
									Description: `list of field transformations. order does not matter.`,
								},
							},
						},
						Description: `list of stream transformations. order does not matter.`,
					},
				},
				Description: `Describes the difference between two Airbyte catalogs.`,
			},
			"catalog_id": schema.StringAttribute{
				Computed: true,
			},
			"connection_id": schema.StringAttribute{
				Optional: true,
			},
			"connection_status": schema.StringAttribute{
				Computed: true,
				MarkdownDescription: `must be one of ["active", "inactive", "deprecated"]` + "\n" +
					`Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.`,
			},
			"disable_cache": schema.BoolAttribute{
				Optional: true,
			},
			"job_info": schema.SingleNestedAttribute{
				Computed: true,
				Attributes: map[string]schema.Attribute{
					"id": schema.StringAttribute{
						Computed: true,
					},
					"config_type": schema.StringAttribute{
						Computed:    true,
						Description: `must be one of ["check_connection_source", "check_connection_destination", "discover_schema", "get_spec", "sync", "reset_connection"]`,
					},
					"config_id": schema.StringAttribute{
						Computed:    true,
						Description: `only present if a config id was provided.`,
					},
					"created_at": schema.Int64Attribute{
						Computed: true,
					},
					"ended_at": schema.Int64Attribute{
						Computed: true,
					},
					"succeeded": schema.BoolAttribute{
						Computed: true,
					},
					"connector_configuration_updated": schema.BoolAttribute{
						Computed:    true,
						Description: `Default: false`,
					},
					"logs": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"log_lines": schema.ListAttribute{
								Computed:    true,
								ElementType: types.StringType,
							},
						},
					},
					"failure_reason": schema.SingleNestedAttribute{
						Computed: true,
						Attributes: map[string]schema.Attribute{
							"failure_origin": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `must be one of ["source", "destination", "replication", "persistence", "normalization", "dbt", "airbyte_platform", "unknown"]` + "\n" +
									`Indicates where the error originated. If not set, the origin of error is not well known.`,
							},
							"failure_type": schema.StringAttribute{
								Computed: true,
								MarkdownDescription: `must be one of ["config_error", "system_error", "manual_cancellation", "refresh_schema", "heartbeat_timeout", "destination_timeout"]` + "\n" +
									`Categorizes well known errors into types for programmatic handling. If not set, the type of error is not well known.`,
							},
							"external_message": schema.StringAttribute{
								Computed: true,
							},
							"internal_message": schema.StringAttribute{
								Computed: true,
							},
							"stacktrace": schema.StringAttribute{
								Computed: true,
							},
							"retryable": schema.BoolAttribute{
								Computed:    true,
								Description: `True if it is known that retrying may succeed, e.g. for a transient failure. False if it is known that a retry will not succeed, e.g. for a configuration issue. If not set, retryable status is not well known.`,
							},
							"timestamp": schema.Int64Attribute{
								Computed: true,
							},
						},
					},
				},
			},
			"notify_schema_change": schema.BoolAttribute{
				Optional: true,
			},
			"source_id": schema.StringAttribute{
				Required: true,
			},
		},
	}
}

func (r *SourceSchemaDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.SDK)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.SDK, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *SourceSchemaDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *SourceSchemaDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	request := *data.ToGetSDKType()
	res, err := r.client.Source.DiscoverSchemaForSource(ctx, request)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if res.SourceDiscoverSchemaRead == nil {
		resp.Diagnostics.AddError("unexpected response from API. No response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromGetResponse(res.SourceDiscoverSchemaRead)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
